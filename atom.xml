<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bing&#39;s Blog</title>
  <subtitle>Do one thing at a time, and do well.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.weixinbing.com/"/>
  <updated>2018-12-03T13:02:51.356Z</updated>
  <id>http://www.weixinbing.com/</id>
  
  <author>
    <name>weixb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>官方 Swift API 设计指南（译）</title>
    <link href="http://www.weixinbing.com/2018/10/10/22%20%5B%E8%AF%91%5D%20%E5%AE%98%E6%96%B9%20Swift%20API%20%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/"/>
    <id>http://www.weixinbing.com/2018/10/10/22 [译] 官方 Swift API 设计指南/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2018-12-03T13:02:51.356Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="external">Swift API Design Guidelines</a></p>
<p>其他：<a href="https://google.github.io/swift/" target="_blank" rel="external">Google Swift Style Guide</a> （<a href="https://www.yuque.com/kiwi/ios/style-guide" target="_blank" rel="external">中文版</a>）</p>
<a id="more"></a>
<h2 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h2><ul>
<li><strong>使用时能够清晰表达设计者的意图</strong>，是最重要的目标。做出 API 设计、声明后要检查在上下文中是否足够清晰明白。</li>
</ul>
<ul>
<li><strong>清晰比简洁重要</strong>。虽然 swift 代码可以被写得很简短，但是让代码尽量少不是 swift 的目标。简洁的代码来源于安全、强大的类型系统和其他一些语言特性减少了不必要的模板代码。而不是主观上写出最少的代码。</li>
</ul>
<ul>
<li><p><strong>为每个API添加注释</strong>。添加注释有助于加深对API的理解，从而其设计产生深远影响。所以，别犯懒</p>
<p>如果您无法用简单的术语描述API的功能，那么您可能设计了错误的API。</p>
<ul>
<li><p><strong>使用Swift的</strong><a href="https://developer.apple.com/library/prerelease/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/" target="_blank" rel="external">Markdown</a><strong>。</strong></p>
</li>
<li><p><strong>首先</strong>描述要声明的实体<strong>的摘要</strong>。通常，API可以从其声明及其摘要中完全理解。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns a "view" of `self` containing the same elements in</span></div><div class="line"><span class="comment">/// reverse order.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reversed</span><span class="params">()</span></span> -&gt; <span class="type">ReverseCollection</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>专注于总结</strong> ; 这是最重要的部分。许多优秀的文档注释只包含一个很棒的摘要。</p>
</li>
<li><p>如果可能，<strong>使用单个句子片段</strong>，以<strong>句点</strong>结束。不要使用完整的句子。</p>
</li>
<li><p><strong>描述函数或方法的**</strong>作用<strong>**和</strong> <strong>返回的内容</strong>，省略null效果并<code>Void</code>返回：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Inserts `newHead` at the beginning of `self`.</span></div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">prepend</span><span class="params">(<span class="number">_</span> newHead: Int)</span></span></div><div class="line"></div><div class="line"><span class="comment">/// Returns a `List` containing `head` followed by the elements</span></div><div class="line"><span class="comment">/// of `self`.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepending</span><span class="params">(<span class="number">_</span> head: Element)</span></span> -&gt; <span class="type">List</span></div><div class="line"></div><div class="line"><span class="comment">/// Removes and returns the first element of `self` if non-empty;</span></div><div class="line"><span class="comment">/// returns `nil` otherwise.</span></div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">popFirst</span><span class="params">()</span></span> -&gt; <span class="type">Element</span>?</div></pre></td></tr></table></figure>
<p>注意：在<code>popFirst</code>上述极少数情况下，摘要由分号分隔的多个句子片段组成。</p>
</li>
<li><p><strong>描述下标**</strong>访问的内容**：</p>
</li>
<li><p><strong>描述初始化程序**</strong>创建的内容**：</p>
</li>
<li><p>对于所有其他声明，请<strong>描述声明的实体**</strong>是<strong>**什么</strong>。</p>
</li>
</ul>
</li>
<li><p><strong>继续</strong>使用一个或多个段落和项目符号项。段落用空行分隔并使用完整的句子<strong>（可选）</strong>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 将`items`中每个元素的文字表示写入标准输出。</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// 每个元素`x`的文字表示通过表达式`String(x)`生成。</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - 参数 separator: 两项之间的文字</span></div><div class="line"><span class="comment">/// - 参数 terminator: 末尾的文字</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - 注意: 想要省略末尾的换行符，为`terminator`传入""</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - 其他参考: `CustomDebugStringConvertible`, `CustomStringConvertible`, `debugPrint`。</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(</span></span></div><div class="line">  <span class="number">_</span> items: Any..., separator: String = <span class="string">" "</span>, terminator: String = <span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p>在适当的时候，<strong>使用已识别的</strong> <a href="https://developer.apple.com/library/prerelease/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/SymbolDocumentation.html#//apple_ref/doc/uid/TP40016497-CH51-SW1" target="_blank" rel="external">符号文档标记</a> <strong>元素</strong>在摘要之外添加信息</p>
</li>
<li><p><strong>使用</strong><a href="https://developer.apple.com/library/prerelease/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/SymbolDocumentation.html#//apple_ref/doc/uid/TP40016497-CH51-SW13" target="_blank" rel="external">符号命令语法</a><strong>了解并使用已识别的项目</strong> <a href="https://developer.apple.com/library/prerelease/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/SymbolDocumentation.html#//apple_ref/doc/uid/TP40016497-CH51-SW13" target="_blank" rel="external">符号</a><strong>。</strong>流行的开发工具（如Xcode）对以下列关键字开头的项目符号进行特殊处理：</p>
<p>| Attention  | Author        | Authors      | Bug        |<br>| ———- | ————- | ———— | ———- |<br>| Complexity | Copyright     | Date         | Experiment |<br>| Important  | Invariant     | Note         | Parameter  |<br>| Parameters | Postcondition | Precondition | Remark     |<br>| Requires   | Returns       | SeeAlso      | Since      |<br>| Throws     | ToDo          | Version      | Warning    |</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="意图清晰"><a href="#意图清晰" class="headerlink" title="意图清晰"></a>意图清晰</h3><ul>
<li><p><strong>保证命名让使用的人不会产生歧义</strong></p>
<p>比如在集合中有一个方法，根据给定的位置移除元素：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">List</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(at position: Index)</span></span> -&gt; <span class="type">Element</span></div><div class="line">&#125;</div><div class="line">employees.remove(at: x)</div></pre></td></tr></table></figure>
<p>如果在方法签名中省略了<code>at</code>，用户在使用的时候就会以为这是删除一个等于 x 的元素，而不是移除索引在 x 的元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line">employees.remove(x) // 不够清晰: 这里感觉像是移除 x</div></pre></td></tr></table></figure>
</li>
<li><p><strong>省略无用的词。</strong>命名中的每一个单词都应该有意义。</p>
<p>准确传达意图，消除歧义，意味着更多的单词；然而，携带重复信息的冗余单词，应该省略。特别是那些<em>单纯重复</em>类型信息的词语。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(<span class="number">_</span> member: Element)</span></span> -&gt; <span class="type">Element</span>?</div><div class="line"></div><div class="line">allViews.removeElement(cancelButton)</div></pre></td></tr></table></figure>
<p>上面的代码中，<code>Element</code>在未提供任何有效信息。这个API应修改为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> member: Element)</span></span> -&gt; <span class="type">Element</span>?</div><div class="line"></div><div class="line">allViews.remove(cancelButton) <span class="comment">// 更清晰</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>根据变量，参数，关联类型的角色为其命名</strong>，而非类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="keyword">var</span> string = <span class="string">"Hello"</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ViewController</span> </span>&#123;</div><div class="line">  associatedtype <span class="type">ViewType</span> : <span class="type">View</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionLine</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">restock</span><span class="params">(from widgetFactory: WidgetFactory)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以这种方式再次说明类型的名称并没有让代码更清晰、更富有表现力。但是如果选择用实体承担的角色命名则会好的多。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Hello"</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ViewController</span> </span>&#123;</div><div class="line">  associatedtype <span class="type">ContentView</span> : <span class="type">View</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionLine</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">restock</span><span class="params">(from supplier: WidgetFactory)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果一个 <code>associatedtype</code> 的角色和类型刚好一样，请通过附加<code>Protocol</code>到协议名称来避免冲突 ：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Sequence</span> </span>&#123;</div><div class="line">  associatedtype <span class="type">Iterator</span> : <span class="type">IteratorProtocol</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">IteratorProtocol</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>为弱类型添加补充信息</strong>，明确参数的作用。</p>
<p>尤其是当参数类型为，<code>Any</code>，<code>AnyObject</code>，或诸如<code>Int</code>或<code>String</code>这样的基础类型时，仅靠上下文和类型信息可能不足以传达意图。例如，下面的代码中，方法声明看起来意图还算清晰，但实际使用时却不是这样。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> observer: NSObject, <span class="keyword">for</span> keyPath: String)</span></span></div><div class="line"></div><div class="line">grid.add(<span class="keyword">self</span>, <span class="keyword">for</span>: graphics)</div></pre></td></tr></table></figure>
<p>为了能够重新表达清晰，在每个弱类型参数前加一个名词描述它的角色：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addObserver</span><span class="params">(<span class="number">_</span> observer: NSObject, forKeyPath path: String)</span></span></div><div class="line">grid.addObserver(<span class="keyword">self</span>, forKeyPath: graphics) <span class="comment">// clear</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="让代码更加流畅"><a href="#让代码更加流畅" class="headerlink" title="让代码更加流畅"></a>让代码更加流畅</h3><ul>
<li><p>尽量让方法、函数名使用的时候代码语句接近正常的语法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line">x.insert(y, at: z)          “x, insert y at z”</div><div class="line">x.subViews(havingColor: y)  “x's subviews having color y”</div><div class="line">x.capitalizingNouns()       “x, capitalizing nouns”</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line">x.insert(y, position: z)</div><div class="line">x.subViews(color: y)</div><div class="line">x.nounCapitalize()</div></pre></td></tr></table></figure>
<p>为了流畅度把后面的和方法名相关弱的参数换行也是可以接受的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">AudioUnit</span>.instantiate(</div><div class="line">  with: description, </div><div class="line">  options: [.inProcess], completionHandler: stopProgressBar)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>如果是创建型的工厂方法，用 “make” 开头。</strong>比如：<code>x.makeIterator()</code>。</p>
</li>
<li><p><strong>调用构造函数和工厂方法时，组成的短语不包含第一个参数名</strong>。例如，<code>x.makeWidget(cogCount: 47)</code>。</p>
<p>例如，下面的情况第一个参数命名时都不需要考虑作为一个句子的部分：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="keyword">let</span> foreground = <span class="type">Color</span>(red: <span class="number">32</span>, green: <span class="number">64</span>, blue: <span class="number">128</span>)</div><div class="line"><span class="keyword">let</span> newPart = factory.makeWidget(gears: <span class="number">42</span>, spindles: <span class="number">14</span>)</div><div class="line"><span class="keyword">let</span> ref = <span class="type">Link</span>(target: destination)</div></pre></td></tr></table></figure>
<p>如果为了句子的连贯性就会声明成下面这样（但是并不推荐这样做）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="keyword">let</span> foreground = <span class="type">Color</span>(havingRGBValuesRed: <span class="number">32</span>, green: <span class="number">64</span>, andBlue: <span class="number">128</span>)</div><div class="line"><span class="keyword">let</span> newPart = factory.makeWidget(havingGearCount: <span class="number">42</span>, andSpindleCount: <span class="number">14</span>)</div><div class="line"><span class="keyword">let</span> ref = <span class="type">Link</span>(to: destination)</div></pre></td></tr></table></figure>
<p>实际上，此准则以及<a href="https://swift.org/documentation/api-design-guidelines/#argument-labels" target="_blank" rel="external">参数标签的</a>准则 意味着第一个参数将具有标签，除非调用执行的是<a href="https://swift.org/documentation/api-design-guidelines/#type-conversion" target="_blank" rel="external">值保留类型转换</a>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> rgbForeground = <span class="type">RGBColor</span>(cmykForeground)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>函数、方法命名时要参考自身的副作用。</strong></p>
<ul>
<li><p>没有副作用的名字读起来应该像一个名词的短语。比如： <code>x.distance(to: y)</code>, <code>i.successor()</code>。</p>
</li>
<li><p>有副作用的读起来应该是一个祈使式的动词短语，比如：<code>print(x)</code>, <code>x.sort()</code>,  <code>x.append(y)</code>。</p>
</li>
<li><p>可变/不可变方法的命名要成对出现。一个可变方法通常都有一个不可变方法与之对应，二者的语义相近，区别在于前者直接更新实例，后者返回一个新值。</p>
<ul>
<li><p>如果描述操作的是一个动词，使用动词的祈使态表示 mutating，nonmutating 在动词后加上  “ed” 或 “ing” 表示。</p>
<p>| 可变方法      | 不可变方法           |<br>| ————- | ——————– |<br>| <code>x.sort()</code>    | <code>z = x.sorted()</code>     |<br>| <code>x.append(y)</code> | <code>z = x.appending(y)</code> |</p>
</li>
<li><p>当一项操作恰好能够被一个名词描述时，使用名词为不可变方法命名；加前缀”form”，为可变方法命名。</p>
<p>| 不可变方法           | 可变方法              |<br>| ——————– | ——————— |<br>| <code>x = y.union(z)</code>     | <code>y.formUnion(z)</code>      |<br>| <code>j = c.successor(i)</code> | <code>c.formSuccessor(&amp;i)</code> |</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>作为不可变方法，如果<strong>返回布尔值的方法或属性，读起来应该像是对被调用对象的断言</strong>。例如，<code>x.isEmpty</code>，<code>line1.intersects(line2)</code>。</p>
</li>
</ul>
<ul>
<li><strong>表示是什么的 Protocol 读起来应该是一个名词</strong>。比如：<code>Collection</code>。</li>
</ul>
<ul>
<li><strong>表示能力的 Protocol 后缀应该用 able、ible 或者 ing 修饰。</strong>比如：<code>Equatable</code>, <code>ProgressReporting</code>。</li>
</ul>
<ul>
<li><strong>其他形式的类型、属性、变量、常量都应该用名词命名。</strong></li>
</ul>
<h3 id="慎用术语"><a href="#慎用术语" class="headerlink" title="慎用术语"></a>慎用术语</h3><blockquote>
<p><strong>Term of Art</strong>    名词 - 在某个领域或行业内，有着明确特殊含义的词或短语。</p>
</blockquote>
<ul>
<li><strong>避免使用晦涩的术语</strong>，特别是如果有一个常见词汇能够表达同样意义时。例如，如果”皮肤“能够满足表述需求，就不要使用“表皮”。术语是重要的交流工具，但应该仅在其他表述方式会丢失关键意义时使用。</li>
</ul>
<ul>
<li><p><strong>如果使用术语，严格的使用术语本来的含义。</strong></p>
<p>使用技术术语的原因就是它比常用的词语能够更精确的表达含义，因此 API 应该严格按照其公认的含义使用术语。</p>
<ul>
<li><strong>不要让专家感到惊讶：</strong>如果这个词出现在熟悉它的人面前，他还会觉得惊讶说明这个词的含义很可能被歪曲了。</li>
<li><strong>不要让新手感到迷茫：</strong>任何一个人如果想要了解这个术语通过一个普通的网络搜索就应该能够查到它的含义。</li>
</ul>
</li>
</ul>
<ul>
<li><strong>避免使用缩写。</strong>尤其是非标准的缩写。非标准的缩略语可能无法被其他人正确的理解。</li>
</ul>
<p>使用的任何缩写的意思都应该很容易通过网络搜索查到。</p>
<ul>
<li><strong>遵循先例</strong>。不用因为新手的理解成本而改变原有用法。<ul>
<li>例如，最好将一个连续的数据结构命名为<code>Array</code>，而非更简单的<code>List</code>，虽然对于新手来说，后者的含义更容易掌握。数组是现代计算机科学的基础数据结构，所以每个程序员都知道——或者很快就会学到——什么是数组。使用大多数程序员所熟悉的术语，这样，即便有问题，互联网和其他人也能够提供帮助。</li>
<li>在某些特定的编程领域，例如数学， 诸如<code>sin(x)</code>这样已经广为人们所接受的术语，要比诸如<code>verticalPositionOnUnitCircleAtOriginOfEndOfRadiusWithAngle(x)</code>这样解释性的命名好的多。注意，这里先例打破了避免缩写的规则：尽管单词的完整拼写是<code>sine</code>，但”sin(x)”已经被程序员使用了数十年，在数学中更是数百年。 </li>
</ul>
</li>
</ul>
<hr>
<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><h3 id="通用约定"><a href="#通用约定" class="headerlink" title="通用约定"></a>通用约定</h3><ul>
<li><p><strong>对于复杂度不是O(1)的计算型属性，要通过注释特别说明</strong>。人们总是认为属性访问不牵扯大量计算，因为访问的是实例变量（存储型属性）。当这个惯例被打破时，有必要提醒他们。</p>
</li>
<li><p><strong>优先选择方法或属性，而非函数</strong>。后者只在下述情况中使用：</p>
<ul>
<li><p>使用时不需要 <code>self</code> 存在：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">min</span>(x, y, z)</div></pre></td></tr></table></figure>
</li>
<li><p>不限制类型的函数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(x)</div></pre></td></tr></table></figure>
</li>
<li><p>函数的使用方式已经是一个习惯用法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sin(x)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>遵守大小写的惯例</strong>类型和协议的命名首字母大写，其他的都是首字母小写。</p>
<p>美式英语中首字母通常以大写出现的缩略词的所有字母大小写保持一致：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> utf8Bytes: [<span class="type">UTF8</span>.<span class="type">CodeUnit</span>]</div><div class="line"><span class="keyword">var</span> isRepresentableAsASCII = <span class="literal">true</span></div><div class="line"><span class="keyword">var</span> userSMTPServer: <span class="type">SecureSMTPServer</span></div></pre></td></tr></table></figure>
<p>其他情况的缩略词当做普通单词处理：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> radarDetector: <span class="type">RadarScanner</span></div><div class="line"><span class="keyword">var</span> enjoysScubaDiving = <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>当方法共享</strong>相同的基本含义或在不同的域中操作时，<strong>方法可以共享基本名称</strong>。</p>
<p>下面这种方式是被鼓励的，因为所有的方法的目的都是一样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">  <span class="comment">/// Returns `true` iff `other` is within the area of `self`.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> other: Point)</span></span> -&gt; <span class="type">Bool</span> &#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="comment">/// Returns `true` iff `other` is entirely within the area of `self`.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> other: Shape)</span></span> -&gt; <span class="type">Bool</span> &#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="comment">/// Returns `true` iff `other` is within the area of `self`.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> other: LineSegment)</span></span> -&gt; <span class="type">Bool</span> &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为几何类型和集合也是不同的领域，所有下面这样定义也是可以的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> <span class="title">where</span> <span class="title">Element</span> : <span class="title">Equatable</span> </span>&#123;</div><div class="line">  <span class="comment">/// Returns `true` iff `self` contains an element equal to</span></div><div class="line">  <span class="comment">/// `sought`.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> sought: Element)</span></span> -&gt; <span class="type">Bool</span> &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面例子中的 index 则有不同的含义，所以应该有不同的命名：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Database</span> </span>&#123;</div><div class="line">  <span class="comment">/// Rebuilds the database's search index</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">()</span></span> &#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="comment">/// Returns the `n`th row in the given table.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> n: Int, inTable: TableID)</span></span> -&gt; <span class="type">TableRow</span> &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，避免方法只有返回类型不同，这会影响系统的类型推断。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Box</span> </span>&#123;</div><div class="line">  <span class="comment">/// Returns the `Int` stored in `self`, if any, and</span></div><div class="line">  <span class="comment">/// `nil` otherwise.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">value</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>? &#123; ... &#125;</div><div class="line"></div><div class="line">  <span class="comment">/// Returns the `String` stored in `self`, if any, and</span></div><div class="line">  <span class="comment">/// `nil` otherwise.</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">value</span><span class="params">()</span></span> -&gt; <span class="type">String</span>? &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参数（Parameters）"><a href="#参数（Parameters）" class="headerlink" title="参数（Parameters）"></a>参数（Parameters）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(from start: Point, to end: Point)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>选择参数名称以提供文档</strong>。即使参数名称在函数或方法调用时没有出现，它们也起着重要的解释作用。</p>
<p>选择能够提升文档可读性的名称。下面的例子中，参数名使得文档读起来自然流畅：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="comment">/// 返回一个`Array`，包含`self`中所有满足`predicate`的元素</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(<span class="number">_</span> predicate: <span class="params">(Element)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; [<span class="type">Generator</span>.<span class="type">Element</span>]</div><div class="line"></div><div class="line"><span class="comment">/// 将给定的`subRange`中的元素替换为`newElements`</span></div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">replaceRange</span><span class="params">(<span class="number">_</span> subRange: Range, with newElements: [E])</span></span></div></pre></td></tr></table></figure>
<p>而下面的文档读起来很别扭，不符合语言习惯：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="comment">/// 返回一个`Array`，包含`self`中所有满足`includedInResult`的元素</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(<span class="number">_</span> includedInResult: <span class="params">(Element)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; [<span class="type">Generator</span>.<span class="type">Element</span>]</div><div class="line"></div><div class="line"><span class="comment">/// 将`r`所指代的范围内的元素替换为`with`中的内容</span></div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">replaceRange</span><span class="params">(<span class="number">_</span> r: Range, with: [E])</span></span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>利用默认参数简化用例</strong>。如果参数有一个常用值，就可以为其提供一个默认参数。</p>
<p>通过隐藏无关信息，默认参数能够提升可读性。例如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="keyword">let</span> order = lastName.compare(royalFamilyName, options [], range: <span class="literal">nil</span>, locale: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>通过默认参数，化繁为简：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="keyword">let</span> order = lastName.compare(royalFamilyName)</div></pre></td></tr></table></figure>
<p>默认参数通常适用于方法族， 大大减轻了理解API的负担。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span> <span class="params">(<span class="number">_</span> other: String, options: CompareOptions = [], range: Range? = <span class="literal">nil</span>, locale: Locale? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Ordering</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述方法看起来可能没那么简单，但它比以下简单得多：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">      <span class="comment">/// ...description 1...</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(<span class="number">_</span> other: String)</span></span> -&gt; <span class="type">Ordering</span></div><div class="line">      <span class="comment">/// ...description 2...</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(<span class="number">_</span> other: String, options: CompareOptions)</span></span> -&gt; <span class="type">Ordering</span></div><div class="line">      <span class="comment">/// ...description 3...</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(</span></span></div><div class="line">         <span class="number">_</span> other: String, options: CompareOptions, range: Range) -&gt; <span class="type">Ordering</span></div><div class="line">      <span class="comment">/// ...description 4...</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(</span></span></div><div class="line">         <span class="number">_</span> other: String, options: StringCompareOptions,</div><div class="line">         range: Range, locale: Locale) -&gt; <span class="type">Ordering</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个方法都要分开注释；为了选择使用哪一个，用户必须全部理解，并搞清它们之间的关系。有时，这些关系让人感到诧异，例如<code>foo(bar: nil)</code>和<code>foo()</code>的作用并不总是相同——试图在文档中寻找这种微妙区别会变是很恶心的。利用默认参数，简化为一个方法，极大提升了用户体验。 </p>
</li>
<li><p><strong>将具有默认参数的参数项放到方法最后</strong>。从语义上来说，没有默认参数的参数项对于方法来说更为重要，并且可以在调用时提供稳定的格式。</p>
</li>
</ul>
<h3 id="参数标签（Argument-Labels）"><a href="#参数标签（Argument-Labels）" class="headerlink" title="参数标签（Argument Labels）"></a>参数标签（Argument Labels）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(from start: Point, to end: Point)</span></span></div><div class="line">x.move(from: x, to: y)</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>如果不需要区分参数，则可以省略所有实参标签</strong>。例如：<code>min(number1, number2)</code>, <code>zip(sequence1, sequence2)</code>。</p>
</li>
<li><p><strong>如果构造函数进行的是值保留类型转换操作，则省略第一个实参标签</strong>。例如：<code>Int64(someUint32)</code>。</p>
<p>第一个参数应该始终是转换的数据源。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="comment">// Convert `x` into its textual representation in the given radix</span></div><div class="line">  <span class="keyword">init</span>(<span class="number">_</span> x: <span class="type">BigInt</span>, radix: <span class="type">Int</span> = <span class="number">10</span>)   ← <span class="type">Note</span> the initial underscore</div><div class="line">&#125;</div><div class="line"></div><div class="line">text = <span class="string">"The value is: "</span></div><div class="line">text += <span class="type">String</span>(veryLargeNumber)</div><div class="line">text += <span class="string">" and in hexadecimal, it's"</span></div><div class="line">text += <span class="type">String</span>(veryLargeNumber, radix: <span class="number">16</span>)</div></pre></td></tr></table></figure>
<p>而对于“值省略类型转换”来说，最好使用第一个标签描述所省略的内容。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UInt32</span> </span>&#123;</div><div class="line">  <span class="comment">/// Creates an instance having the specified `value`.</span></div><div class="line">  <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">Int16</span>)            ← <span class="type">Widening</span>, so no label</div><div class="line">  <span class="comment">/// Creates an instance having the lowest 32 bits of `source`.</span></div><div class="line">  <span class="keyword">init</span>(truncating source: <span class="type">UInt64</span>)</div><div class="line">  <span class="comment">/// Creates an instance having the nearest representable</span></div><div class="line">  <span class="comment">/// approximation of `valueToApproximate`.</span></div><div class="line">  <span class="keyword">init</span>(saturating valueToApproximate: <span class="type">UInt64</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>值保留类型转换是<a href="https://en.wikipedia.org/wiki/Monomorphism" target="_blank" rel="external">单态</a>，即一个值对应一个结果。例如，将一个<code>Int8</code>值转换为一个<code>Int64</code>值属于这种操作，因为不同的<code>Int8</code>值都对应不同的<code>Int64</code>值。反过来就不是：<code>Int64</code>可能的值要比<code>Int8</code>能够表示的值多得多。</p>
<p>注意：能否追溯原始值，同是不是值保留类型转换没有联系。</p>
</blockquote>
</li>
<li><p><strong>当第一个参数构成</strong><a href="https://en.wikipedia.org/wiki/Adpositional_phrase#Prepositional_phrases" target="_blank" rel="external">介词短语的</a><strong>一部分时 ，给它一个参数标签</strong>。参数标签通常应该以<a href="https://en.wikipedia.org/wiki/Preposition" target="_blank" rel="external">介词</a>开头 ，例如<code>x.removeBoxes(havingLength: 12)</code>。</p>
<p>有一种例外是前两个或多个参数共同组成一个抽象概念。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line">a.move(toX: b, y: <span class="built_in">c</span>)</div><div class="line">a.fade(fromRed: b, green: <span class="built_in">c</span>, blue: d)</div></pre></td></tr></table></figure>
<p>这时，将介词提前，放在方法名中，概念会更清晰。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line">a.moveTo(x: b, y: <span class="built_in">c</span>)</div><div class="line">a.fadeFrom(red: b, green: <span class="built_in">c</span>, blue: d)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>否则，如果第一个参数构成语法短语的一部分，则省略其标签</strong>，将任何前面的单词附加到基本名称，例如<code>x.addSubview(y)</code></p>
<p>本规则意味着如果第一个参数不组成任何短语，应该给其加上标签。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line">view.dismiss(animated: <span class="literal">false</span>)</div><div class="line"><span class="keyword">let</span> text = words.<span class="built_in">split</span>(maxSplits: <span class="number">12</span>)</div><div class="line"><span class="keyword">let</span> studentByName = students.sorted(isOrderedBefore: <span class="type">Student</span>.namePrecedes)</div></pre></td></tr></table></figure>
<p>请注意，短语传达正确的含义非常重要。下述短语的含义错误。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line">view.dismiss(<span class="literal">false</span>) <span class="comment">// 不要dismiss？还是dismiss一个布尔值？</span></div><div class="line">words.<span class="built_in">split</span>(<span class="number">12</span>) <span class="comment">// 查分一个数字12？</span></div></pre></td></tr></table></figure>
<p>另外，有默认值的参数可以省略，因此这些参数不参与短语的组成，所以它们总是有标签。</p>
</li>
</ul>
<ul>
<li><strong>其他参数都需要加上标签</strong>。</li>
</ul>
<hr>
<h2 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h2><ul>
<li><p>如果API使用使用了闭包和元组，则<strong>为闭包参数和元组成员添加标签</strong>。</p>
<p>这些标签具有解释作用，可以在编写注释时引用，还可以用来访问元组成员。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 确保至少分配了`requestedCapacity`个元素的存储空间。</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// 如果需要更多存储空间，`allocate`会被调用，分配`byteCount`个最大对齐字节。</span></div><div class="line"><span class="comment">/// </span></div><div class="line"><span class="comment">/// -  返回</span></div><div class="line"><span class="comment">///     - reallocated: 当且仅当新的内存非配成功，返回`true`</span></div><div class="line"><span class="comment">///     - capacityChanged: 当且仅当`capacity`被更新时，返回`true`</span></div><div class="line"></div><div class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureUniqueStorage</span><span class="params">(</span></span></div><div class="line">  minimumCapacity requestedCapacity: Int, </div><div class="line">  allocate: <span class="params">(<span class="number">_</span> byteCount: Int)</span> -&gt; <span class="type">UnsafePointer</span>&lt;<span class="type">Void</span>&gt;</div><div class="line">) -&gt; (reallocated: <span class="type">Bool</span>, capacityChanged: <span class="type">Bool</span>)</div></pre></td></tr></table></figure>
<p>闭包参数的命名规则和正常的函数参数规则一样，但是参数标签还不支持闭包。</p>
</li>
</ul>
<ul>
<li><p><strong>使用弱类型时，避免重载产生歧义</strong>。例如，<code>Any</code>，<code>AnyObject</code>及不受限的范型参数。</p>
<p>考虑如下一组重载方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="comment">/// 在`self.endIndex`中插入`newElement`。</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> newElement: Element)</span></span></div><div class="line">    </div><div class="line">    <span class="comment">/// 将`newElements`中的内容按序插入`self.endIndex`中。</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> newElement: S)</span></span> <span class="keyword">where</span> <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些方法从语义上构成一个方法族，参数的类型乍一看也有很大区别。但是，如果<code>Element</code>的类型是<code>Any</code>，那么一个<code>Element</code>就和一组<code>Element</code>有着相同的类型（即一个和一组都是<code>Any</code>）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">❌</div><div class="line"><span class="keyword">var</span> values: [<span class="type">Any</span>] = [<span class="number">1</span>, <span class="string">"a"</span>]</div><div class="line">values.append([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 结果是[1, "a", [2, 3, 4]]还是[1, "a", 2, 3, 4]？</span></div></pre></td></tr></table></figure>
<p>为了消除歧义，重新命名第二个方法，赋予其更多含义。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">✅</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="comment">/// 在`self.endIndex`中插入`newElement`。</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> newElement: Element)</span></span></div><div class="line">    </div><div class="line">    <span class="comment">/// 将`newElements`中的内容按序插入`self.endIndex`中。</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(contentsOf newElement: S)</span></span> <span class="keyword">where</span> <span class="type">S</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Element</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意第二个方法的实参标签是如何同文档呼应的。这时，通过书写文档，API设计者能够注意到潜在的问题。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot;&gt;Swift API Design Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他：&lt;a href=&quot;https://google.github.io/swift/&quot;&gt;Google Swift Style Guide&lt;/a&gt; （&lt;a href=&quot;https://www.yuque.com/kiwi/ios/style-guide&quot;&gt;中文版&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.weixinbing.com/categories/Swift/"/>
    
    
      <category term="Swift" scheme="http://www.weixinbing.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS端mPaaS框架</title>
    <link href="http://www.weixinbing.com/2018/06/18/21%20iOS%E7%AB%AFmPaaS%E8%B0%83%E7%A0%94%E6%96%87%E6%A1%A3/"/>
    <id>http://www.weixinbing.com/2018/06/18/21 iOS端mPaaS调研文档/</id>
    <published>2018-06-17T16:00:00.000Z</published>
    <updated>2018-12-04T11:09:22.127Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tech.antfin.com/docs/2/49549" target="_blank" rel="external">mPaaS官网</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>移动开发平台（Mobile PaaS，简称 mPaaS）是源于支付宝 App 的移动开发平台，为移动开发、测试、运营及运维提供云到端的一站式解决方案，能有效降低技术门槛、减少研发成本、提升开发效率，协助企业快速搭建稳定高质量的移动 App。</p>
<h2 id="配置开发环境流程："><a href="#配置开发环境流程：" class="headerlink" title="配置开发环境流程："></a>配置开发环境流程：</h2><a id="more"></a>
<p>按照官方文档配置流程，本人最开始使用的.org的ruby源，导致后面安装开发者工具报错，更新为.com后环境配置一路顺畅。流程如下：</p>
<h4 id="检查-RubyGems-源"><a href="#检查-RubyGems-源" class="headerlink" title="检查 RubyGems 源"></a>检查 RubyGems 源</h4><blockquote>
<p>公告！因域名备案问题，.org域名无法继续提供RubyGems镜像服务，我们提供.com代替.org的域名，其它一切不变</p>
<p>$ gem sources –add <a href="https://gems.ruby-china.com/" target="_blank" rel="external">https://gems.ruby-china.com/</a> –remove <a href="https://rubygems.org/" target="_blank" rel="external">https://rubygems.org/</a></p>
<p><strong>$</strong> gem sources -l</p>
<p>#确保只有 <a href="http://gems.ruby-china.com/" target="_blank" rel="external">gems.ruby-china.com</a></p>
</blockquote>
<h3 id="升级-RubyGems"><a href="#升级-RubyGems" class="headerlink" title="升级 RubyGems"></a>升级 RubyGems</h3><blockquote>
<p><strong>$</strong> sudo gem update –system</p>
</blockquote>
<h3 id="安装-Ruby2-2-4"><a href="#安装-Ruby2-2-4" class="headerlink" title="安装 Ruby2.2.4"></a>安装 Ruby2.2.4</h3><p>使用rvm工具管理ruby版本，如果安装了多个版本，设置Ruby 2.2.4 为默认版本</p>
<blockquote>
<p><strong>$</strong> rvm use 2.2.4 –default</p>
</blockquote>
<h3 id="安装开发者工具"><a href="#安装开发者工具" class="headerlink" title="安装开发者工具"></a>安装开发者工具</h3><blockquote>
<p>完全退出 Xcode，在终端运行下列安装命令：</p>
<p><strong>$</strong> sh &lt;(curl -s <a href="http://mpaas-ios.oss-cn-hangzhou.aliyuncs.com/mPaaS-Install-Tool/installmPaaS.sh" target="_blank" rel="external">http://mpaas-ios.oss-cn-hangzhou.aliyuncs.com/mPaaS-Install-Tool/installmPaaS.sh</a> )</p>
<p>对于 Xcode 8 之后的版本，安装 mPaaS 插件时需要 unsign Xcode。按照提示输入 <code>U</code>。脚本会自动完成安装。</p>
<p>去除Xcode签名</p>
<p><strong>$</strong> mpaas unsign</p>
<p>恢复Xcode签名</p>
<p><strong>$</strong> mpaas restore</p>
<p>更新所有 Xcode 插件的 UUID</p>
<p><strong>$</strong> mpaas update_plugins</p>
</blockquote>
<h3 id="安装命令行工具（可选）"><a href="#安装命令行工具（可选）" class="headerlink" title="安装命令行工具（可选）"></a>安装命令行工具（可选）</h3><blockquote>
<p>更新到最新版的开发者工具</p>
<p><strong>$</strong> mpkitupdate</p>
<p>打印出本地的 SDK 里模块的信息</p>
<p><strong>$</strong> mpaas sdk</p>
<p>更新本地SDK</p>
<p><strong>$</strong> mpaas sdk update</p>
</blockquote>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><h3 id="基于-mPaaS-框架开发"><a href="#基于-mPaaS-框架开发" class="headerlink" title="基于 mPaaS 框架开发"></a>基于 mPaaS 框架开发</h3><p>按照官方文档流程接入正常</p>
<h3 id="基于系统框架开发"><a href="#基于系统框架开发" class="headerlink" title="基于系统框架开发"></a>基于系统框架开发</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tech.antfin.com/docs/2/49549&quot;&gt;mPaaS官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;移动开发平台（Mobile PaaS，简称 mPaaS）是源于支付宝 App 的移动开发平台，为移动开发、测试、运营及运维提供云到端的一站式解决方案，能有效降低技术门槛、减少研发成本、提升开发效率，协助企业快速搭建稳定高质量的移动 App。&lt;/p&gt;
&lt;h2 id=&quot;配置开发环境流程：&quot;&gt;&lt;a href=&quot;#配置开发环境流程：&quot; class=&quot;headerlink&quot; title=&quot;配置开发环境流程：&quot;&gt;&lt;/a&gt;配置开发环境流程：&lt;/h2&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="mPaas" scheme="http://www.weixinbing.com/tags/mPaas/"/>
    
  </entry>
  
  <entry>
    <title>RXSwift+MJRefresh+MVVM列表框架</title>
    <link href="http://www.weixinbing.com/2018/05/16/20.0%20RXSwift+MJRefresh+MVVM%E5%88%97%E8%A1%A8%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.weixinbing.com/2018/05/16/20.0 RXSwift+MJRefresh+MVVM列表框架/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-12-04T11:09:42.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速实现列表上下拉刷新"><a href="#快速实现列表上下拉刷新" class="headerlink" title="快速实现列表上下拉刷新"></a>快速实现列表上下拉刷新</h2><h3 id="1-创建viewModel类"><a href="#1-创建viewModel类" class="headerlink" title="1. 创建viewModel类"></a>1. 创建viewModel类</h3><p>该类继承MGRefreshable，重载requestMethod获取列表接口数据，并传递给rx的订阅者</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGProjectViewModel</span>: <span class="title">MGRefreshable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> param: [<span class="type">String</span>: <span class="type">Any</span>]?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">requestMethod</span><span class="params">(<span class="number">_</span> observer: <span class="params">(AnyObserver&lt;Any&gt;)</span></span></span>) &#123;</div><div class="line">        <span class="type">MGRequest</span>.listData(<span class="type">MGProjectModel</span>.<span class="keyword">self</span>, <span class="type">API</span>: <span class="type">MGProjectAPI</span>.<span class="keyword">self</span>, target: .projectList(page: currentPage, size: pageSize, param: param), success: &#123; (data) <span class="keyword">in</span></div><div class="line">            observer.onNext(data)</div><div class="line">            observer.onCompleted()</div><div class="line">        &#125;, failure: &#123; (<span class="number">_</span>, <span class="number">_</span>) <span class="keyword">in</span></div><div class="line">            observer.onCompleted()</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-viewController初始化viewModel并关联tableview"><a href="#2-viewController初始化viewModel并关联tableview" class="headerlink" title="2. viewController初始化viewModel并关联tableview"></a>2. viewController初始化viewModel并关联tableview</h3><p>startRequest和下拉刷新的逻辑一样，但不会触发下拉的UI效果</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> viewModel = <span class="type">MGProjectViewModel</span>()</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    ...</div><div class="line">    viewModel.configListRefresh(tableView: tableView)</div><div class="line">    viewModel.startRequest()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>tableview的cell逻辑</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MGProjectViewController</span>: <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//设置cell的数量</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> viewModel.dataSource.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//设置tableview的cell</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="type">MGDefaultCellID</span>, <span class="keyword">for</span>: indexPath) <span class="keyword">as</span>! <span class="type">MGDefaultTableViewCell</span></div><div class="line">        <span class="keyword">let</span> model = viewModel.dataSource[indexPath.row] <span class="keyword">as</span>! <span class="type">MGProjectModel</span></div><div class="line">        cell.title = model.name</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="组件封装源码"><a href="#组件封装源码" class="headerlink" title="组件封装源码"></a>组件封装源码</h2><p>MGRefreshable.swift封装上下拉刷新和监听列表数据逻辑</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MGRefreshableData</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestMethod</span><span class="params">(<span class="number">_</span> observer: <span class="params">(RxSwift.AnyObserver&lt;Any&gt;)</span></span></span>)</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGRefreshable</span>: <span class="title">MGRefreshableData</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestMethod</span><span class="params">(<span class="number">_</span> observer: <span class="params">(AnyObserver&lt;Any&gt;)</span></span></span>) &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> total: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> currentPage: <span class="type">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> pageSize: <span class="type">Int</span> = <span class="number">20</span></div><div class="line">    <span class="keyword">var</span> isNoMore: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> hiddenMJHeader: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> hiddenMJFooter: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> dataSource = <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;()<span class="comment">//列表数据源</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> refreshData = <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;() &#123;</div><div class="line">        <span class="comment">//当前页接口数据</span></div><div class="line">        <span class="keyword">willSet</span>(data) &#123;</div><div class="line">            <span class="keyword">if</span> (currentPage == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">self</span>.dataSource.removeAll()</div><div class="line">            &#125;</div><div class="line">            isNoMore = data.<span class="built_in">count</span> &lt; <span class="keyword">self</span>.pageSize</div><div class="line">            <span class="keyword">self</span>.dataSource = <span class="keyword">self</span>.dataSource + data</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> scrollView: <span class="type">UIScrollView</span>?</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    </div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> refreshObservable = <span class="type">Observable</span>.create &#123; (observer:<span class="type">AnyObserver</span>&lt;<span class="type">Any</span>&gt;) -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>.requestMethod(observer)</div><div class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MGRefreshable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startRequest</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> tableView = scrollView <span class="keyword">as</span>! <span class="type">UITableView</span></div><div class="line">        currentPage = <span class="number">1</span></div><div class="line">        refreshObservable.subscribe(onNext: &#123; (obj) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>.refreshData = obj <span class="keyword">as</span>! [<span class="type">Any</span>]</div><div class="line">        &#125;, onCompleted: &#123;</div><div class="line">            tableView.reloadData()</div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.dataSource.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</div><div class="line">                tableView.setContentOffset(<span class="type">CGPoint</span>.zero, animated: <span class="literal">true</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.isNoMore &#123;</div><div class="line">                tableView.mj_footer.endRefreshingWithNoMoreData()</div><div class="line">            &#125;</div><div class="line">        &#125;).disposed(by: <span class="keyword">self</span>.disposeBag)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configListRefresh</span><span class="params">(tableView: UITableView)</span></span> &#123;</div><div class="line">        scrollView = tableView</div><div class="line">        <span class="comment">//下拉控件</span></div><div class="line">        <span class="keyword">if</span> !hiddenMJHeader &#123;</div><div class="line">            <span class="keyword">let</span> header = <span class="type">MJRefreshNormalHeader</span>.<span class="keyword">init</span>(refreshingBlock: &#123;</div><div class="line">                tableView.mj_footer.state = .idle</div><div class="line">                <span class="keyword">self</span>.currentPage = <span class="number">1</span></div><div class="line">                <span class="keyword">self</span>.refreshObservable.subscribe(onNext: &#123; (obj) <span class="keyword">in</span></div><div class="line">                    <span class="keyword">self</span>.refreshData = obj <span class="keyword">as</span>! [<span class="type">Any</span>]</div><div class="line">                &#125;, onCompleted: &#123;</div><div class="line">                    tableView.reloadData()</div><div class="line">                    tableView.mj_header.endRefreshing()</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">self</span>.isNoMore &#123;</div><div class="line">                        tableView.mj_footer.endRefreshingWithNoMoreData()</div><div class="line">                    &#125;</div><div class="line">                &#125;).disposed(by: <span class="keyword">self</span>.disposeBag)</div><div class="line">            &#125;)</div><div class="line">            header?.lastUpdatedTimeLabel.isHidden = <span class="literal">true</span></div><div class="line">            header?.stateLabel.isHidden = <span class="literal">true</span></div><div class="line">            tableView.mj_header = header</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//上拉控件</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.hiddenMJFooter &#123; <span class="keyword">return</span> &#125;</div><div class="line">        tableView.mj_footer = <span class="type">MJRefreshBackNormalFooter</span>.<span class="keyword">init</span>(refreshingBlock: &#123;</div><div class="line">            tableView.mj_header.state = .idle</div><div class="line">            <span class="keyword">self</span>.currentPage += <span class="number">1</span></div><div class="line">            <span class="keyword">self</span>.refreshObservable.subscribe(onNext: &#123; (obj) <span class="keyword">in</span></div><div class="line">                <span class="keyword">self</span>.refreshData = obj <span class="keyword">as</span>! [<span class="type">Any</span>]</div><div class="line">            &#125;, onCompleted: &#123;</div><div class="line">                tableView.reloadData()</div><div class="line">                tableView.mj_header.endRefreshing()</div><div class="line">                <span class="keyword">if</span> <span class="keyword">self</span>.isNoMore &#123;</div><div class="line">                    tableView.mj_footer.endRefreshingWithNoMoreData()</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    tableView.mj_footer.endRefreshing()</div><div class="line">                &#125;</div><div class="line">            &#125;).disposed(by: <span class="keyword">self</span>.disposeBag)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速实现列表上下拉刷新&quot;&gt;&lt;a href=&quot;#快速实现列表上下拉刷新&quot; class=&quot;headerlink&quot; title=&quot;快速实现列表上下拉刷新&quot;&gt;&lt;/a&gt;快速实现列表上下拉刷新&lt;/h2&gt;&lt;h3 id=&quot;1-创建viewModel类&quot;&gt;&lt;a href=&quot;#1-创建viewModel类&quot; class=&quot;headerlink&quot; title=&quot;1. 创建viewModel类&quot;&gt;&lt;/a&gt;1. 创建viewModel类&lt;/h3&gt;&lt;p&gt;该类继承MGRefreshable，重载requestMethod获取列表接口数据，并传递给rx的订阅者&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://www.weixinbing.com/categories/Swift/"/>
    
    
      <category term="框架" scheme="http://www.weixinbing.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mail邮箱管理</title>
    <link href="http://www.weixinbing.com/2018/03/21/20%20Mail%E9%82%AE%E7%AE%B1%E7%AE%A1%E7%90%86/"/>
    <id>http://www.weixinbing.com/2018/03/21/20 Mail邮箱管理/</id>
    <published>2018-03-21T14:36:36.000Z</published>
    <updated>2018-12-03T13:01:40.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h2><h4 id="QQ邮箱"><a href="#QQ邮箱" class="headerlink" title="QQ邮箱"></a>QQ邮箱</h4><p>登录QQ邮箱网页版，点击设置-&gt;账号-&gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</p>
<p>开启IMAP/SMTP服务</p>
<table>
<thead>
<tr>
<th>协议</th>
<th>服务器地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>POP3</td>
<td>pop.qq.com</td>
</tr>
<tr>
<td>IMAP</td>
<td>imap.qq.com</td>
</tr>
<tr>
<td>SMTP</td>
<td>smtp.qq.com</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h4 id="QQ企业邮箱"><a href="#QQ企业邮箱" class="headerlink" title="QQ企业邮箱"></a>QQ企业邮箱</h4><table>
<thead>
<tr>
<th>协议</th>
<th>服务器地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>POP3</td>
<td>pop.exmail.qq.com</td>
</tr>
<tr>
<td>IMAP</td>
<td>imap.exmail.qq.com</td>
</tr>
<tr>
<td>SMTP</td>
<td>smtp.exmail.qq.com</td>
</tr>
</tbody>
</table>
<h4 id="阿里云邮箱"><a href="#阿里云邮箱" class="headerlink" title="阿里云邮箱"></a>阿里云邮箱</h4><table>
<thead>
<tr>
<th>协议</th>
<th>服务器地址</th>
<th>服务器端口号（常规）</th>
<th>服务器端口号（加密）</th>
</tr>
</thead>
<tbody>
<tr>
<td>POP3</td>
<td>pop.qiye.aliyun.com</td>
<td>110</td>
<td>995</td>
</tr>
<tr>
<td>IMAP</td>
<td>imap.qiye.aliyun.com</td>
<td>143</td>
<td>993</td>
</tr>
<tr>
<td>SMTP</td>
<td>smtp.qiye.aliyun.com</td>
<td>25</td>
<td>465</td>
</tr>
</tbody>
</table>
<p>参考：<a href="http://blog.51cto.com/7650911/2047585" target="_blank" rel="external">关于邮箱的POP协议、imap协议、imap协议简单讲解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加账号&quot;&gt;&lt;a href=&quot;#添加账号&quot; class=&quot;headerlink&quot; title=&quot;添加账号&quot;&gt;&lt;/a&gt;添加账号&lt;/h2&gt;&lt;h4 id=&quot;QQ邮箱&quot;&gt;&lt;a href=&quot;#QQ邮箱&quot; class=&quot;headerlink&quot; title=&quot;QQ邮箱&quot;&gt;&lt;/a&gt;QQ邮箱&lt;/h4&gt;&lt;p&gt;登录QQ邮箱网页版，点击设置-&amp;gt;账号-&amp;gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务&lt;/p&gt;
&lt;p&gt;开启IMAP/SMTP服务&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;th&gt;服务器地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POP3&lt;/td&gt;
&lt;td&gt;pop.qq.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IMAP&lt;/td&gt;
&lt;td&gt;imap.qq.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMTP&lt;/td&gt;
&lt;td&gt;smtp.qq.com&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.weixinbing.com/categories/Mac/"/>
    
    
      <category term="翻墙" scheme="http://www.weixinbing.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Mac代理设置-Proxifier</title>
    <link href="http://www.weixinbing.com/2018/03/21/19%20Mac%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE-Proxifier/"/>
    <id>http://www.weixinbing.com/2018/03/21/19 Mac代理设置-Proxifier/</id>
    <published>2018-03-21T13:36:36.000Z</published>
    <updated>2018-12-03T13:01:34.159Z</updated>
    
    <content type="html"><![CDATA[<p>Proxifier<a href="https://www.proxifier.com/" target="_blank" rel="external">下载</a></p>
<h4 id="设置代理服务器"><a href="#设置代理服务器" class="headerlink" title="设置代理服务器"></a>设置代理服务器</h4><a id="more"></a>
<p>步骤如下：</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538211563117-b5bdac91-f2d0-4025-b052-7782e165e5e0.png" alt="img"></p>
<p>shdowsocks的端口默认1080（自定义shdowsocks端口的需要修改）</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538211643295-1902f5a5-965e-4244-b65f-dcb1e11688b5.png" alt="img"></p>
<h4 id="设置代理规则"><a href="#设置代理规则" class="headerlink" title="设置代理规则"></a>设置代理规则</h4><p>方案1：设置全局代理</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538211966122-c599d006-56ac-4da8-be6f-079a102ce54e.png" alt="img"></p>
<p>方案2：设置部分代理</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538211757396-227e9712-0b74-4696-b3d1-fda9f113bf6a.png" alt="img"></p>
<p><a href="https://www.zybuluo.com/yiranphp/note/611721" target="_blank" rel="external">参考来源</a>：一言以蔽之，如果你在终端中发起了网络请求速度很慢的话，可以先把 default 规则，设置为socks5代理（只有设置为代理，日志才会记录），然后分析一下请求的 host：port，然后就可以添加规则了，这样的话，就做到只给部分请求走代理，如果你觉得这样很麻烦，  也可以简单粗暴的，将 default 规则设置为 socks5代理，其余的规则全部禁用，那就是全部的请求走代理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Proxifier&lt;a href=&quot;https://www.proxifier.com/&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;设置代理服务器&quot;&gt;&lt;a href=&quot;#设置代理服务器&quot; class=&quot;headerlink&quot; title=&quot;设置代理服务器&quot;&gt;&lt;/a&gt;设置代理服务器&lt;/h4&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.weixinbing.com/categories/Mac/"/>
    
    
      <category term="翻墙" scheme="http://www.weixinbing.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="http://www.weixinbing.com/2018/03/20/18%20%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://www.weixinbing.com/2018/03/20/18 科学上网/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2018-12-03T13:01:27.232Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装shadowsocks"><a href="#1-安装shadowsocks" class="headerlink" title="1. 安装shadowsocks"></a>1. 安装shadowsocks</h4><p>shadowsocks<a href="https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients" target="_blank" rel="external">下载链接</a></p>
<p>Shadowsocks Windows <a href="https://github.com/shadowsocks/shadowsocks-windows/wiki/Shadowsocks-Windows-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">使用说明</a></p>
<a id="more"></a>
<h4 id="2-购买VPS"><a href="#2-购买VPS" class="headerlink" title="2. 购买VPS"></a>2. 购买VPS</h4><p>推荐搬瓦工，稳定、性价比高（20美元/年）</p>
<p><a href="https://bandwagonhost.com/index.php" target="_blank" rel="external">搬瓦工VPS</a></p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543325724143-71568aa0-5a24-4398-a9cc-870fb5c11db3.png" alt="img"></p>
<h4 id="3-VPS搭建Shadowsocks"><a href="#3-VPS搭建Shadowsocks" class="headerlink" title="3. VPS搭建Shadowsocks"></a>3. VPS搭建Shadowsocks</h4><p>从搬瓦工管理页面进入控制面板，步骤如下：</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538214179235-38d17221-0f61-43c2-9c9e-29b57c29f3d1.png" alt="img"></p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538214080502-973f31e4-59b5-43f6-8234-89390917f33b.png" alt="img"></p>
<p>方法1：找到左侧的Shadowsocks server，点击安装（该功能若未显示，可使用方法2）</p>
<p>方法2：在浏览器输入<a href="https://kiwivm.64clouds.com/preloader.php?load=/main-exec.php?mode=extras_shadowsocks" target="_blank" rel="external">链接</a>打开界面后点击安装</p>
<p>安装成功后如下：</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1538214375563-08f29259-168d-4686-9e07-f43257b22d74.png" alt="img"></p>
<h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><p>1、2、3步骤完成后浏览器就可以科学上网了</p>
<p>终端翻墙：<a href="http://www.cashqian.net/blog/001486989831982332565298e4942a2bb8f56b08f9d2475000" target="_blank" rel="external">使用shadowsocks翻墙</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-安装shadowsocks&quot;&gt;&lt;a href=&quot;#1-安装shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;1. 安装shadowsocks&quot;&gt;&lt;/a&gt;1. 安装shadowsocks&lt;/h4&gt;&lt;p&gt;shadowsocks&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients&quot;&gt;下载链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shadowsocks Windows &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/wiki/Shadowsocks-Windows-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E&quot;&gt;使用说明&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.weixinbing.com/categories/Mac/"/>
    
    
      <category term="翻墙" scheme="http://www.weixinbing.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>ipa重签名的三种方法</title>
    <link href="http://www.weixinbing.com/2017/09/09/17%20ipa%E9%87%8D%E7%AD%BE%E5%90%8D%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://www.weixinbing.com/2017/09/09/17 ipa重签名的三种方法/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2018-12-03T10:21:45.714Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、sigh-resign"><a href="#一、sigh-resign" class="headerlink" title="一、sigh resign"></a>一、sigh resign</h4><blockquote>
<p>安装 sigh 命令：[sudo] gem install sigh</p>
<p>安装 fastlane 命令：[sudo] gem install fastlane -NV</p>
</blockquote>
<a id="more"></a>
<p>第一步，把 ipa 包和下载的描述文件 XXX.mobileprovison 放在同级目录下</p>
<p>第二步，终端 cd 到这个 ipa 的文件夹目录下，执行 sigh resign 或者 fastlane sigh resign 命令</p>
<p>第三步：输入 Signing Identity (证书的十六进制串)</p>
<h4 id="二、iOS-App-Signer"><a href="#二、iOS-App-Signer" class="headerlink" title="二、iOS App Signer"></a>二、<a href="https://github.com/DanTheMan827/ios-app-signer" target="_blank" rel="external">iOS App Signer</a></h4><p>下载 GitHub 上的源码运行</p>
<p>第一项，填写要重签名的 ipa 路径，<br>第二项，选择新签名的证书，<br>第三项，选择下载的描述文件 provisoning profile（默认项 Re-Sign Only 是无效的）</p>
<p>点击 star</p>
<h4 id="三、iResign-不推荐"><a href="#三、iResign-不推荐" class="headerlink" title="三、iResign (不推荐)"></a>三、<a href="https://github.com/maciekish/iReSign" target="_blank" rel="external">iResign</a> (不推荐)</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、sigh-resign&quot;&gt;&lt;a href=&quot;#一、sigh-resign&quot; class=&quot;headerlink&quot; title=&quot;一、sigh resign&quot;&gt;&lt;/a&gt;一、sigh resign&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;安装 sigh 命令：[sudo] gem install sigh&lt;/p&gt;
&lt;p&gt;安装 fastlane 命令：[sudo] gem install fastlane -NV&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="ipa" scheme="http://www.weixinbing.com/tags/ipa/"/>
    
  </entry>
  
  <entry>
    <title>zsh安装和配置</title>
    <link href="http://www.weixinbing.com/2017/09/02/16%20zsh%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.weixinbing.com/2017/09/02/16 zsh安装和配置/</id>
    <published>2017-09-01T16:00:00.000Z</published>
    <updated>2018-12-03T10:06:31.625Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://ohmyz.sh/" target="_blank" rel="external">zsh官网</a></p>
<a id="more"></a>
<h4 id="zsh安装"><a href="#zsh安装" class="headerlink" title="zsh安装"></a>zsh安装</h4><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><p>终端运行（需翻墙）：</p>
<p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>编辑配置文件<br><code>vim ~/.zshrc</code></p>
<p>修改主题：ZSH_THEME=”ys”</p>
<p>重新载入源文件<br><code>source ~/.zshrc</code></p>
<h5 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h5><p><code>brew install zsh-autosuggestions</code></p>
<p><code>brew install zsh-syntax-highlighting</code></p>
<p>vim ~/.zshrc 然后G 切换到末行 添加</p>
<blockquote>
<p>source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh<br>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>
</blockquote>
<h5 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h5><p>⌃ + u：清空当前行</p>
<p>⌃ + a：移动到行首</p>
<p>⌃ + e：移动到行尾</p>
<p>⌃ + f：向前移动</p>
<p>⌃ + b：向后移动</p>
<p>⌃ + p：上一条命令</p>
<p>⌃ + n：下一条命令</p>
<p>⌃ + r：搜索历史命令</p>
<p>⌃ + y：召回最近用命令删除的文字</p>
<p>⌃ + h：删除光标之前的字符</p>
<p>⌃ + d：删除光标所指的字符</p>
<p>⌃ + w：删除光标之前的单词</p>
<p>⌃ + k：删除从光标到行尾的内容</p>
<p>⌃ + t：交换光标和之前的字符</p>
<p>⌘ + d：上下分屏</p>
<p>⇧⌘ + d：关闭上下分屏</p>
<p><a href="https://www.zhihu.com/question/21418449" target="_blank" rel="external">为什么说 zsh 是 shell 中的极品？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://ohmyz.sh/&quot;&gt;zsh官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.weixinbing.com/categories/Mac/"/>
    
    
      <category term="zsh" scheme="http://www.weixinbing.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动化部署和发布之Fastlane</title>
    <link href="http://www.weixinbing.com/2017/07/20/15%20iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%92%8C%E5%8F%91%E5%B8%83%E4%B9%8BFastlane/"/>
    <id>http://www.weixinbing.com/2017/07/20/15 iOS自动化部署和发布之Fastlane/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2018-12-03T10:06:36.732Z</updated>
    
    <content type="html"><![CDATA[<p>Fastlane<br><a id="more"></a></p>
<p>官方文档：<a href="https://docs.fastlane.tools/" target="_blank" rel="external">https://docs.fastlane.tools/</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>确保安装了最新版本的Xcode命令行工具：</p>
<blockquote>
<p>xcode-select –install</p>
</blockquote>
<p>安装fastlane：</p>
<blockquote>
<p>使用gem命令安装<br>[sudo] gem install fastlane -NV<br>使用brew命令安装<br>brew cask install fastlane</p>
</blockquote>
<p>cd到工程所在目录下执行：</p>
<blockquote>
<p>fastlane init</p>
</blockquote>
<p>插件安装</p>
<blockquote>
<p>firim插件<br>fastlane add_plugin firim<br>蒲公英插件<br>fastlane add_plugin pgyer</p>
</blockquote>
<p>####文件配置</p>
<h5 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a>Appfile</h5><blockquote>
<p>Appfile用来配置一些类似于AppleID、BundleID参数(参数是fastlane已经定义好的，新增的并没有用，可以在Fastfile中使用，AppleID、BundleID等其实会被一些actions直接调用，并不需要写出来传递。</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 默认配置</span></div><div class="line">app_identifier    <span class="string">""</span></div><div class="line">apple_id    <span class="string">""</span></div><div class="line">team_id    <span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment"># 如果lane是test换成Dev的配置</span></div><div class="line">for_lane <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  app_identifier    <span class="string">""</span></div><div class="line">  apple_id    <span class="string">""</span></div><div class="line">  team_id    <span class="string">""</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h5 id="Fastfile"><a href="#Fastfile" class="headerlink" title="Fastfile"></a>Fastfile</h5><blockquote>
<p>Fastfile包含分发您的应用程序所需的所有信息。可以在before_all、after_all、error中做一些操作以建立一些lane作为关键的执行逻辑，可以在其中使用fastlane内置的action，也可以调用自建action，还可以调用别的lane。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">default_platform(<span class="symbol">:ios</span>)</div><div class="line"></div><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">    desc <span class="string">"Description of what the lane does"</span></div><div class="line">    lane <span class="symbol">:test_firim</span> <span class="keyword">do</span></div><div class="line">    <span class="comment"># add actions here: https://docs.fastlane.tools/actions</span></div><div class="line">    build_app( </div><div class="line">    	<span class="symbol">workspace:</span> <span class="string">"xxx.xcworkspace"</span>, </div><div class="line">    	<span class="symbol">scheme:</span> <span class="string">"xxx"</span>, </div><div class="line">    	<span class="symbol">export_method:</span> <span class="string">"enterprise"</span>, </div><div class="line">	    <span class="symbol">configuration:</span> <span class="string">"Debug"</span>,<span class="comment"># Defaults to 'Release'</span></div><div class="line">        <span class="symbol">output_directory:</span> <span class="string">"./build"</span>,</div><div class="line">        <span class="symbol">output_name:</span> <span class="string">"xxx"</span>,</div><div class="line">    	)</div><div class="line">	    firim(<span class="symbol">firim_api_token:</span> <span class="string">""</span>) <span class="comment">#上传ipa到fir.im服务器</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">	desc <span class="string">"Push a new release build to the App Store"</span></div><div class="line">	lane <span class="symbol">:appstore</span> <span class="keyword">do</span></div><div class="line">		build_app(<span class="symbol">workspace:</span> <span class="string">"xxx.xcworkspace"</span>, <span class="symbol">scheme:</span> <span class="string">"xxx"</span>)</div><div class="line">        upload_to_app_store</div><div class="line">    <span class="keyword">end</span></div><div class="line">  </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><blockquote>
<p>fastlane test_firim</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fastlane&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="自动化" scheme="http://www.weixinbing.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例</title>
    <link href="http://www.weixinbing.com/2017/07/15/13%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/"/>
    <id>http://www.weixinbing.com/2017/07/15/13 设计模式-单例/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2018-12-03T10:26:23.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  分析代码:</div><div class="line"> 利用了static关键字,这样以来该变量就会一直存储在静态区的,和系统同生共死.</div><div class="line"> 利用gcd保证 instance = [[self alloc] init];这句代码只会执行一次,也就说明该对象一旦创建出来,就不会被重新创建</div><div class="line"> */</div><div class="line">static id instance; // 单例（全局变量）</div><div class="line"></div><div class="line">/** 单例方法 */</div><div class="line">+ (instancetype)shared&lt;#Class#&gt; &#123;</div><div class="line">    // 使用GCD确保只进行一次</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        instance = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    return instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** alloc 会调用allocWithZone方法 */</div><div class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone &#123;</div><div class="line">    // 使用GCD确保只进行一次</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        instance = [super allocWithZone:zone];</div><div class="line">    &#125;);</div><div class="line">    return instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** copy在底层 会调用copyWithZone方法 */</div><div class="line">- (id)copyWithZone:(struct _NSZone *)zone &#123;</div><div class="line">    </div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Objective-C&quot;&gt;&lt;a href=&quot;#Objective-C&quot; class=&quot;headerlink&quot; title=&quot;Objective-C&quot;&gt;&lt;/a&gt;Objective-C&lt;/h2&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.weixinbing.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>View层代码结构规范</title>
    <link href="http://www.weixinbing.com/2017/07/10/12%20View%E5%B1%82%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E8%A7%84%E8%8C%83/"/>
    <id>http://www.weixinbing.com/2017/07/10/12 View层代码结构规范/</id>
    <published>2017-07-10T00:05:39.000Z</published>
    <updated>2017-07-10T00:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>针对View层的架构设计，还是要做好三点：</p>
<ul>
<li>代码规范</li>
<li>架构模式</li>
<li>工具集</li>
</ul>
<a id="more"></a>
<blockquote>
<p>View层的工具集主要还是集中在如何对View进行布局，以及一些特定的View，比如带搜索提示的搜索框这种。各自实现或者使用CocoaPods里现成的都不是很难。</p>
</blockquote>
<h4 id="关于View的代码规范"><a href="#关于View的代码规范" class="headerlink" title="关于View的代码规范"></a>关于View的代码规范</h4><p>目的:</p>
<ol>
<li>提高业务方View层的可读性可维护性</li>
<li>防止业务代码对架构产生腐蚀</li>
<li>保持架构发展的方向不轻易被不合理的意见所左右</li>
<li>确保传承</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - Init</span></div><div class="line"><span class="comment">/* init, dealloc */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Life cycle</span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Delegate</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Event response</span></div><div class="line"><span class="comment">/* 所有button、gestureRecognizer的响应事件都放在这个区域里面 */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Private methods</span></div><div class="line"><span class="comment">/* 关于private methods，正常情况下ViewController里面不应该写,</span></div><div class="line"> 要么把它写成一个category，要么把他做成一个模块，哪怕这个模块只有一个函数也行。*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Getters and setters</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在viewDidload里面只做addSubview的事情<br>在viewDidAppear里面做Notification的监听之类的事情<br>在updateViewConstraints里面做add constraints的事情<br>属性的初始化，则交给getter去做<br>每一个delegate都把对应的protocol名字带上<br>所有button、gestureRecognizer的响应事件都放在Event response这个区域里面</p>
</blockquote>
<h4 id="关于View的布局"><a href="#关于View的布局" class="headerlink" title="关于View的布局"></a>关于View的布局</h4><p><code>苹果文档中指出，updateViewConstraints是用来做add constraints的地方。</code><br>建议使用Masonry，代码的可读性就能好很多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;针对View层的架构设计，还是要做好三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码规范&lt;/li&gt;
&lt;li&gt;架构模式&lt;/li&gt;
&lt;li&gt;工具集&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="代码规范" scheme="http://www.weixinbing.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目的目录结构</title>
    <link href="http://www.weixinbing.com/2017/07/10/11.0%20iOS%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://www.weixinbing.com/2017/07/10/11.0 iOS项目的目录结构/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2018-12-03T14:06:55.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个合理的目录结构首先应该是清晰的，让人一眼看上去就能大概了解目录的职责，且容易应对新的变化。</p>
<a id="more"></a>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543329783206-02a6fd7c-879c-4b42-8a71-318337591c59.png" alt="img"></p>
<h3 id="AppDelegate"><a href="#AppDelegate" class="headerlink" title="AppDelegate"></a>AppDelegate</h3><p>目录下放AppDelegate.h(.m)文件，是整个应用的入口文件，所以单独拿出来</p>
<h3 id="Sections"><a href="#Sections" class="headerlink" title="Sections"></a>Sections</h3><p>目录下放app的具体模块，如登录、设置等</p>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p>目录下放会被重用的Views、Macro和Categories等</p>
<p>Macro目录下放了整个应用会用到的宏定义</p>
<ul>
<li>AppMacro.h  </li>
<li>UtilsMacro.h </li>
<li>VendorMacro.h </li>
<li>NotificationMacro.h</li>
</ul>
<blockquote>
<p>AppMacro.h 里放app相关的宏定义</p>
<p>UtilsMacro.h 里放一些方便使用的宏定义</p>
<p>VendorMacro.h 里放一些第三方常量</p>
<p>NotificationMacro.h 里放通知相关的宏定义</p>
</blockquote>
<p>Helpers目录放一些助手类，文件名与功能挂钩</p>
<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>目录放app会用到的一些资源，主要是图片</p>
<h3 id="Vendors"><a href="#Vendors" class="headerlink" title="Vendors"></a>Vendors</h3><p>目录放第三方的类库/SDK</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;p&gt;一个合理的目录结构首先应该是清晰的，让人一眼看上去就能大概了解目录的职责，且容易应对新的变化。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://www.weixinbing.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://www.weixinbing.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>写一个iOS应用之前必须做的事</title>
    <link href="http://www.weixinbing.com/2017/06/30/11%20%E5%86%99%E4%B8%80%E4%B8%AAiOS%E5%BA%94%E7%94%A8%E4%B9%8B%E5%89%8D%E5%BF%85%E9%A1%BB%E5%81%9A%E7%9A%84%E4%BA%8B/"/>
    <id>http://www.weixinbing.com/2017/06/30/11 写一个iOS应用之前必须做的事/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2018-12-03T10:47:37.568Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>为工程设置编码风格规范</li>
<li>在写代码之前确定应用的架构</li>
<li>确定应用的目录结构</li>
<li>项目依赖管理</li>
</ol>
<a id="more"></a>
<h3 id="为工程设置编码风格规范"><a href="#为工程设置编码风格规范" class="headerlink" title="为工程设置编码风格规范"></a>为工程设置编码风格规范</h3><p>编码规范能够保证代码更加统一、更易于阅读和维护</p>
<p>可以设置自己的编码风格，但是必须保证同组的人遵守相同的规范</p>
<h3 id="确定应用的架构"><a href="#确定应用的架构" class="headerlink" title="确定应用的架构"></a>确定应用的架构</h3><p>使用传统的MVC架构，或者使用更加流行的MVVM或VIPER架构</p>
<p>在同一个应用中包含着多种架构。比如，你开始的时候使用MVC，突然意识到一个页面(如：列表)在MVC模式下的变得越来越难以维护，然后就切换到MVVM架构，但是仅仅针对这一个页面。并没有必要对哪些MVC模式下运转良好的页面进行重构，因为二者是可以并存的。</p>
<h3 id="确定目录结构"><a href="#确定目录结构" class="headerlink" title="确定目录结构"></a>确定目录结构</h3><p>看起来是件小的事情，却可以使你的项目更加有条理且易于理解。</p>
<h3 id="项目依赖管理"><a href="#项目依赖管理" class="headerlink" title="项目依赖管理"></a>项目依赖管理</h3><p>CocoaPods一般用于Objective-C项目</p>
<p>Carthage一般用于Swift项目</p>
<h2 id="iOS中MVC划分的正确姿势"><a href="#iOS中MVC划分的正确姿势" class="headerlink" title="iOS中MVC划分的正确姿势"></a>iOS中MVC划分的正确姿势</h2><h3 id="M应该做的事："><a href="#M应该做的事：" class="headerlink" title="M应该做的事："></a>M应该做的事：</h3><ul>
<li>给ViewController提供数据</li>
<li>给ViewController存储数据提供接口</li>
<li>提供经过抽象的业务基本组件，供Controller调度</li>
</ul>
<h3 id="C应该做的事："><a href="#C应该做的事：" class="headerlink" title="C应该做的事："></a>C应该做的事：</h3><ul>
<li>管理View Container的生命周期</li>
<li>负责生成所有的View实例，并放入View Container</li>
<li>监听来自View与业务有关的事件，通过与Model的合作，来完成对应事件的业务。</li>
</ul>
<h3 id="V应该做的事："><a href="#V应该做的事：" class="headerlink" title="V应该做的事："></a>V应该做的事：</h3><ul>
<li>响应与业务无关的事件，并因此引发动画效果，点击反馈（如果合适的话，尽量还是放在View去做）等。</li>
<li>界面元素表达</li>
</ul>
<p>ViewController代码结构：</p>
<blockquote>
<p>#pragma mark - 生命周期</p>
<p>#pragma mark - initialize</p>
<p>#pragma mark - 私有方法</p>
<p>#pragma mark - 重写方法</p>
<p>#pragma mark - 事件响应方法 </p>
<p>#pragma mark - 系统协议</p>
<p>#pragma mark - 自定义协议</p>
<p>#pragma mark - setter</p>
<p>#pragma mark - getter</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;为工程设置编码风格规范&lt;/li&gt;
&lt;li&gt;在写代码之前确定应用的架构&lt;/li&gt;
&lt;li&gt;确定应用的目录结构&lt;/li&gt;
&lt;li&gt;项目依赖管理&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="架构" scheme="http://www.weixinbing.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>面向对象原则（SOLID）</title>
    <link href="http://www.weixinbing.com/2017/06/29/10%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%88%99%EF%BC%88SOLID%EF%BC%89/"/>
    <id>http://www.weixinbing.com/2017/06/29/10 面向对象原则（SOLID）/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2018-12-03T10:49:36.332Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99" target="_blank" rel="external">单一功能原则</a> （Single Responsiblity Principle SRP）</li>
<li><a href="http://baike.baidu.com/view/866233.htm" target="_blank" rel="external">开闭原则</a>（Open Closed Principle，OCP</li>
<li><a href="http://baike.baidu.com/view/1638361.htm" target="_blank" rel="external">里氏替换原则</a>（Liskov Substitution Principle，LSP）</li>
<li><a href="http://baike.baidu.com/view/1638378.htm" target="_blank" rel="external">接口隔离原则</a>（Interface Segregation Principle，ISP）</li>
<li><a href="http://baike.baidu.com/view/1996652.htm" target="_blank" rel="external">依赖倒置原则</a>（Dependency Inversion Principle，DIP）</li>
</ul>
<ul>
<li><a href="http://baike.baidu.com/view/823220.htm" target="_blank" rel="external">迪米特法则</a>（Law of Demeter，LOD，也叫最小知识原则）</li>
</ul>
<a id="more"></a>
<p>设计模式就是实现了这些原则，从而达到了代码复用、增加可维护性的目的。</p>
<h3 id="单一功能原则"><a href="#单一功能原则" class="headerlink" title="单一功能原则"></a><strong>单一功能原则</strong></h3><p>规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>就是说模块应对扩展开放，而对修改关闭。模块应尽量在不修改原（是“原”，指原来的代码）代码的情况下进行扩展。</p>
<p>开闭原则具有理想主义的色彩，它是面向对象设计的终极目标。其他几条，则可以看做是开闭原则的实现方法。</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>子类override方法的访问权限不能小于父类对应方法的访问权限。可以说：里氏代换原则是继承复用的一个基础。</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上</p>
<h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>A.高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。</p>
<p>B.抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p>
<h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>一个软件实体应当尽可能少的与其他实体发生相互作用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99&quot;&gt;单一功能原则&lt;/a&gt; （Single Responsiblity Principle SRP）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/866233.htm&quot;&gt;开闭原则&lt;/a&gt;（Open Closed Principle，OCP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/1638361.htm&quot;&gt;里氏替换原则&lt;/a&gt;（Liskov Substitution Principle，LSP）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/1638378.htm&quot;&gt;接口隔离原则&lt;/a&gt;（Interface Segregation Principle，ISP）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/1996652.htm&quot;&gt;依赖倒置原则&lt;/a&gt;（Dependency Inversion Principle，DIP）&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/823220.htm&quot;&gt;迪米特法则&lt;/a&gt;（Law of Demeter，LOD，也叫最小知识原则）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="http://www.weixinbing.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac工具箱</title>
    <link href="http://www.weixinbing.com/2017/05/13/09%20Mac%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    <id>http://www.weixinbing.com/2017/05/13/09 Mac工具箱/</id>
    <published>2017-05-13T14:53:43.000Z</published>
    <updated>2018-12-03T13:14:44.873Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.alfredapp.com/" target="_blank" rel="external"><br>Alfred</a></p>
<p>Alfred是我见过的最能将Mac的效率使用到极致的工具了。小到翻译一个英文单词，搜索一个文件，大到用一个命令完成本地开发环境的部署启动，都可以通过Alfred来完成。你可以将大部分的重复劳动让Alfred来帮助你完成。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/jpeg/161106/1543842381420-6a493f4f-0830-4d37-b7d8-77a2be7167f2.jpeg" alt="img"></p>
<p><a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch 3</a></p>
<p>一款UI设计工具。Sketch只有几十M，相较于Photoshop,它小巧得多，更重要的是它是专为UI设计而生的，我不必关注那些与我做UI设计毫无关系的图片处理功能，从而降低了工作环境中的噪音。另外，通过强大的插件功能，我能根据需要进行安装使用，这大大提高了我的工作效率。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842398395-35fa37cf-30a3-4e91-a462-796fd5dad727.png" alt="img"></p>
<p><a href="https://www.paintcodeapp.com/" target="_blank" rel="external">PaintCode</a></p>
<p>你可以使用PaintCode方便地进行图形设计，你也可以将SVG或PSD文件导入到PaintCode中，然后它就能帮助你将你的设计转换成Objective-C,Swift或C#代码。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842707584-dceaad38-083b-4b46-9a5f-998f1c7cba2c.png" alt="img"></p>
<p><a href="http://sipapp.io/" target="_blank" rel="external">Sip for Mac and iPhone</a></p>
<p>Sip是一个非常出色的iOS app，它能帮助你从照片中创建色板。并且你可以在你的Mac或手机上随时随地使用它捕捉那些美丽的色彩。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842489312-45d8bd2d-52f2-4a77-a63d-73d11198b8af.png" alt="img"></p>
<p><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text 3</a></p>
<p>这是我开发前端代码时 使用的IDE。我非常喜欢它的那些使代码异常清晰的主题，以及功能丰富的插件。有了它开发HTML、CSS、JavaScript变成了一件非常愉悦的事情。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842520433-be314df7-cc20-4ce5-8f63-61721f4383cf.png" alt="img"></p>
<p><a href="https://kapeli.com/dash" target="_blank" rel="external">Dash</a></p>
<p>Dash对开发人员非常有帮助，我能够在离线的状态下查看如Angular，Swift，CSS等的技术文档。这使得我在网络条件不好的情况下也能工作，并且极大提升我的工作效率。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842531930-f9af8996-2133-4c21-b1f8-3d55f0b755b5.png" alt="img"></p>
<p><a href="https://www.cheatsheetapp.com/CheatSheet/" target="_blank" rel="external">CheatSheet</a></p>
<p>CheatSheet是我非常喜欢的一个小工具，任何流行的软件都会有一堆的快捷键设置，通过这个工具，你只需要长按?键，这个软件的所有快捷键就会显示在你的面前，你完全不用逐一去背，只要反复查看几次，你自然就能熟练运用那些快捷键了。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842565237-89280688-e4dc-4bbf-be65-a93ab7e656c5.png" alt="img"></p>
<p><a href="https://flexibits.com/fantastical" target="_blank" rel="external">Fantastical</a></p>
<p>我使用Fantastical来快速地记录我的todo事项，并设定提醒。我只记录那些比较重要的事项，而不会每天把所有很细小的行动项都记录下来，因为那样反而会让我有一种压迫感而分心。我更喜欢在自然舒缓的环境中工作。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842577102-06efdc75-1e9f-4f97-a671-48707f6159fe.png" alt="img"></p>
<p><a href="http://www.cockos.com/licecap/" target="_blank" rel="external">LiceCap</a></p>
<p>这使一个很小的免费软件，你可以在屏幕上设定一个区域，然后就可以用LiceCap来快速地录制GIF动画了。直接、高效是我对它的评价。</p>
<p><img src="https://cdn-pri.nlark.com/yuque/0/2018/png/161106/1543842592256-07f72556-4025-4a08-8540-7a8e7f49a65e.png" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;br&gt;Alfred&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alfred是我见过的最能将Mac的效率使用到极致的工具了。小到翻译一个英文单词，搜索一个文件
    
    </summary>
    
      <category term="MAC" scheme="http://www.weixinbing.com/categories/MAC/"/>
    
    
      <category term="工具" scheme="http://www.weixinbing.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>OC中数组的去重和排序</title>
    <link href="http://www.weixinbing.com/2017/05/08/08.1%20OC%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%8E%BB%E9%87%8D%E5%92%8C%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.weixinbing.com/2017/05/08/08.1 OC中数组的去重和排序/</id>
    <published>2017-05-07T16:00:00.000Z</published>
    <updated>2018-12-04T09:58:53.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组去重的4种方法"><a href="#数组去重的4种方法" class="headerlink" title="数组去重的4种方法"></a>数组去重的4种方法</h2><h3 id="1-利用NSDictionary的AllKeys（AllValues）方法"><a href="#1-利用NSDictionary的AllKeys（AllValues）方法" class="headerlink" title="1. 利用NSDictionary的AllKeys（AllValues）方法"></a>1. 利用NSDictionary的AllKeys（AllValues）方法</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSMutableDictionary *dic = [[NSMutableDictionary alloc]initWithCapacity:0];</div><div class="line">for(NSString *str in dataArray)</div><div class="line">&#123;</div><div class="line">    [dic setValue:str forKey:str];</div><div class="line">&#125;</div><div class="line">NSLog(@&quot;%@&quot;,[dic allKeys]);</div></pre></td></tr></table></figure>
<h3 id="2-利用NSSet的AllObjects方法"><a href="#2-利用NSSet的AllObjects方法" class="headerlink" title="2. 利用NSSet的AllObjects方法"></a>2. 利用NSSet的AllObjects方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSSet *set = [NSSet setWithArray:dataArray];</div><div class="line">NSLog(@&quot;%@&quot;,[set allObjects]);</div></pre></td></tr></table></figure>
<h3 id="3-利用数组的containsObject来去除"><a href="#3-利用数组的containsObject来去除" class="headerlink" title="3. 利用数组的containsObject来去除"></a>3. 利用数组的containsObject来去除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSMutableArray *listAry = [[NSMutableArray alloc]init];</div><div class="line">for (NSString *str in dataArray) &#123;</div><div class="line">    if (![listAry containsObject:str]) &#123;</div><div class="line">        [listAry addObject:str];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">NSLog(@&quot;%@&quot;,listAry);</div></pre></td></tr></table></figure>
<h3 id="4-利用keyValue的方式"><a href="#4-利用keyValue的方式" class="headerlink" title="4. 利用keyValue的方式"></a>4. 利用keyValue的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dataArray = [dataArray valueForKeyPath:@&quot;@distinctUnionOfObjects.self&quot;];</div><div class="line">NSLog(@&quot;%@&quot;,dataArray);</div></pre></td></tr></table></figure>
<h2 id="数组排序3种常用方法"><a href="#数组排序3种常用方法" class="headerlink" title="数组排序3种常用方法"></a>数组排序3种常用方法</h2><p>大体上，OC中常用的数组排序有以下几种方法：</p>
<ul>
<li>sortedArrayUsingSelector:</li>
<li>sortedArrayUsingComparator:</li>
<li>sortedArrayUsingDescriptors:</li>
</ul>
<h3 id="1、简单排序（sortedArrayUsingSelector-）"><a href="#1、简单排序（sortedArrayUsingSelector-）" class="headerlink" title="1、简单排序（sortedArrayUsingSelector:）"></a>1、简单排序（sortedArrayUsingSelector:）</h3><p>如果只是对字符串的排序，可以利用sortedArrayUsingSelector:方法就可以了，代码如下</p>
<p>//简单排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void sortArray1() &#123;</div><div class="line"></div><div class="line">    NSArray *array = [NSArray arrayWithObjects:@&quot;abc&quot;,@&quot;456&quot;,@&quot;123&quot;,@&quot;789&quot;,@&quot;ef&quot;, nil];</div><div class="line"></div><div class="line">    NSArray *sortedArray = [array sortedArrayUsingSelector:@selector(compare:)];</div><div class="line"></div><div class="line">    NSLog(@&quot;排序后:%@&quot;,sortedArray);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，除了利用字符串自带的compare:方法，也可以自己写compare:方法，进行对象的比较；如下：</p>
<p>首先是新建了Person类，实现方法如下（头文件就省了）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@implementation Person</div><div class="line">//直接实现静态方法，获取带有name和age的Person对象</div><div class="line">+(Person *)personWithAge:(int) age withName:(NSString *)name&#123;</div><div class="line">    Person *person = [[Person alloc] init];</div><div class="line">    person.age = age;</div><div class="line">    </div><div class="line">person.name</div><div class="line"> = name;</div><div class="line">    return person;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//自定义排序方法</div><div class="line">-(NSComparisonResult)comparePerson:(Person *)person&#123;</div><div class="line">  //默认按年龄排序</div><div class="line">    NSComparisonResult result = [[NSNumber numberWithInt:person.age] compare:[NSNumber numberWithInt:self.age]];//注意:基本数据类型要进行数据转换</div><div class="line">  //如果年龄一样，就按照名字排序</div><div class="line">    if (result == NSOrderedSame) &#123;</div><div class="line">        result = [self.name compare:</div><div class="line">person.name</div><div class="line">];</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>主函数代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">void sortArray2() &#123;</div><div class="line"></div><div class="line">    Person *p1 = [Person personWithAge:23 withName:@&quot;zhangsan&quot;];</div><div class="line"></div><div class="line">    Person *p2 = [Person personWithAge:21 withName:@&quot;lisi&quot;];</div><div class="line"></div><div class="line">    Person *p3 = [Person personWithAge:24 withName:@&quot;wangwu&quot;];</div><div class="line"></div><div class="line">    Person *p4 = [Person personWithAge:24 withName:@&quot;liwu&quot;];</div><div class="line"></div><div class="line">    Person *p5 = [Person personWithAge:20 withName:@&quot;liwu&quot;];</div><div class="line"></div><div class="line">    NSArray *array = [NSArray arrayWithObjects:p1,p2,p3,p4,p5, nil];</div><div class="line"></div><div class="line">    NSArray *sortedArray = [array sortedArrayUsingSelector:@selector(comparePerson:)];</div><div class="line"></div><div class="line">    NSLog(@&quot;排序后:%@&quot;,sortedArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、利用block语法（sortedArrayUsingComparator-）"><a href="#2、利用block语法（sortedArrayUsingComparator-）" class="headerlink" title="2、利用block语法（sortedArrayUsingComparator:）"></a>2、利用block语法（sortedArrayUsingComparator:）</h3><p>苹果官方提供了block语法，比较方便。其中数组排序可以用sortedArrayUsingComparator:方法，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void sortArray3()&#123;</div><div class="line"></div><div class="line">    NSArray *array = [NSArray arrayWithObjects:@&quot;1bc&quot;,@&quot;4b6&quot;,@&quot;123&quot;,@&quot;789&quot;,@&quot;3ef&quot;, nil];</div><div class="line"></div><div class="line">    NSArray *sortedArray = [array sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) &#123;</div><div class="line">        //这里的代码可以参照上面compare:默认的排序方法，也可以把自定义的方法写在这里，给对象排序</div><div class="line">        NSComparisonResult result = [obj1 compare:obj2];</div><div class="line">        return result;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    NSLog(@&quot;排序后:%@&quot;,sortedArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、高级排序（sortedArrayUsingDescriptors-）"><a href="#3、高级排序（sortedArrayUsingDescriptors-）" class="headerlink" title="3、高级排序（sortedArrayUsingDescriptors:）"></a>3、高级排序（sortedArrayUsingDescriptors:）</h3><p>如果是这样一种情况呢？Person类里有另外一个类的变量，比如说Person类除了name，age变量，还有一辆车Car类型，Car类里有个name属性。对Person对象进行排序，有这样的要求：按照Car的name排序，如果是同一辆车，也就是Car的name相同，那么再按照年龄进行排序，如果年龄也相同，最后按照Person的name进行排序。</p>
<p>上面这样就要使用第三种方法，利用排序描述器，不多说，有兴趣可以看看API介绍。代码如下：</p>
<p>首先写个Car类，实现类Car.m代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &quot;Car.h&quot;</div><div class="line"></div><div class="line">@implementation Car</div><div class="line"></div><div class="line">+(Car *)initWithName:(NSString *)name&#123;</div><div class="line">    Car *car = [Car alloc] init];</div><div class="line">    </div><div class="line">car.name</div><div class="line"> = name;</div><div class="line">    return car;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后改写Person类，实现类Person.m代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Car.h&quot;</div><div class="line"></div><div class="line">@implementation Person</div><div class="line"></div><div class="line">+(Person *)personWithAge:(int)age withName:(NSString *)name withCar:(Car *)car&#123;</div><div class="line"></div><div class="line">    Person *person = [[Person alloc] init];</div><div class="line">    person.age = age;</div><div class="line">    </div><div class="line">person.name</div><div class="line"> = name;</div><div class="line">    person.car = car;</div><div class="line">    return person;</div><div class="line">&#125; </div><div class="line"></div><div class="line">//这里重写description方法，用于最后测试排序结果显示</div><div class="line">-(NSString *)description&#123;</div><div class="line">    return [NSString stringWithFormat:@&quot;age is %zi , name is %@, car is %@&quot;,_age,_name,</div><div class="line">_car.name</div><div class="line">];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>主函数代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">void sortArray4()&#123;</div><div class="line">        //首先来3辆车，分别是奥迪、劳斯莱斯、宝马</div><div class="line">        Car *car1 = [Car initWithName:@&quot;Audio&quot;];</div><div class="line">        Car *car2 = [Car initWithName:@&quot;Rolls-Royce&quot;];</div><div class="line">        Car *car3 = [Car initWithName:@&quot;BMW&quot;];         </div><div class="line"></div><div class="line">        //再来5个Person，每人送辆车，分别为car2、car1、car1、car3、car2</div><div class="line">        Person *p1 = [Person personWithAge:23 withName:@&quot;zhangsan&quot; withCar:car2];</div><div class="line">        Person *p2 = [Person personWithAge:21 withName:@&quot;zhangsan&quot; withCar:car1];</div><div class="line">        Person *p3 = [Person personWithAge:24 withName:@&quot;lisi&quot; withCar:car1];</div><div class="line">        Person *p4 = [Person personWithAge:23 withName:@&quot;wangwu&quot; withCar:car3];</div><div class="line">        Person *p5 = [Person personWithAge:23 withName:@&quot;wangwu&quot; withCar:car2];</div><div class="line"></div><div class="line">        //加入数组</div><div class="line">        NSArray *array = [NSArray arrayWithObjects:p1,p2,p3,p4,p5, nil];</div><div class="line">       </div><div class="line">        //构建排序描述器</div><div class="line">        NSSortDescriptor *carNameDesc = [NSSortDescriptor sortDescriptorWithKey:@&quot;</div><div class="line">car.name</div><div class="line">&quot; ascending:YES];</div><div class="line">        NSSortDescriptor *personNameDesc = [NSSortDescriptor sortDescriptorWithKey:@&quot;name&quot; ascending:YES];</div><div class="line">        NSSortDescriptor *personAgeDesc = [NSSortDescriptor sortDescriptorWithKey:@&quot;age&quot; ascending:YES];</div><div class="line"></div><div class="line">        //把排序描述器放进数组里，放入的顺序就是你想要排序的顺序</div><div class="line">        //我这里是：首先按照年龄排序，然后是车的名字，最后是按照人的名字</div><div class="line">        NSArray *descriptorArray = [NSArray arrayWithObjects:personAgeDesc,carNameDesc,personNameDesc, nil];</div><div class="line"></div><div class="line">        NSArray *sortedArray = [array sortedArrayUsingDescriptors: descriptorArray];</div><div class="line">        NSLog(@&quot;%@&quot;,sortedArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从结果看出，先按照age排序，如果age相同，按照car排序，如果car相同，按照name排序。</p>
<p>（注意：上面两种排序方法要想实现字符串显示，请重写description方法）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组去重的4种方法&quot;&gt;&lt;a href=&quot;#数组去重的4种方法&quot; class=&quot;headerlink&quot; title=&quot;数组去重的4种方法&quot;&gt;&lt;/a&gt;数组去重的4种方法&lt;/h2&gt;&lt;h3 id=&quot;1-利用NSDictionary的AllKeys（AllValues）方法&quot;&gt;&lt;a href=&quot;#1-利用NSDictionary的AllKeys（AllValues）方法&quot; class=&quot;headerlink&quot; title=&quot;1. 利用NSDictionary的AllKeys（AllValues）方法&quot;&gt;&lt;/a&gt;1. 利用NSDictionary的AllKeys（AllValues）方法&lt;/h3&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.weixinbing.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>多接口并发请求后同步的4种方法</title>
    <link href="http://www.weixinbing.com/2017/05/06/08.0%20%E5%A4%9A%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E5%90%8E%E5%90%8C%E6%AD%A5%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://www.weixinbing.com/2017/05/06/08.0 多接口并发请求后同步的4种方法/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2018-12-04T09:45:56.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-RAC"><a href="#1-RAC" class="headerlink" title="1. RAC"></a>1. RAC</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 处理多个请求，都返回结果的时候，统一做处理.</div><div class="line">RACSignal *request1 = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    // 发送请求1</div><div class="line">    [subscriber sendNext:@&quot;发送请求1&quot;];</div><div class="line">    return nil;</div><div class="line">&#125;];</div><div class="line">RACSignal *request2 = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</div><div class="line">    // 发送请求2</div><div class="line">    [subscriber sendNext:@&quot;发送请求2&quot;];</div><div class="line">    return nil;</div><div class="line">&#125;];</div><div class="line">// 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。</div><div class="line">[self rac_liftSelector:@selector(updateUIWithR1:r2:) withSignalsFromArray:@[request1,request2]];</div><div class="line">// 更新UI</div><div class="line">- (void)updateUIWithR1:(id)data r2:(id)data1</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;更新UI%@  %@&quot;,data,data1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-dispatch-group-t"><a href="#2-dispatch-group-t" class="headerlink" title="2. dispatch_group_t"></a>2. dispatch_group_t</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">    //请求1</div><div class="line">    NSLog(@&quot;Request_1&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">    //请求2</div><div class="line">    NSLog(@&quot;Request_2&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">    //请求3</div><div class="line">    NSLog(@&quot;Request_3&quot;);</div><div class="line">&#125;);</div><div class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">    //界面刷新</div><div class="line">    NSLog(@&quot;任务均完成，刷新界面&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="3-dispatch-semaphore-signal"><a href="#3-dispatch-semaphore-signal" class="headerlink" title="3. dispatch_semaphore_signal"></a>3. dispatch_semaphore_signal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_t sem = dispatch_semaphore_create(0);</div><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;任务1:%@&quot;,[NSThread currentThread]);</div><div class="line">    dispatch_semaphore_signal(sem);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">    NSLog(@&quot;任务2:%@&quot;,[NSThread currentThread]);</div><div class="line">    dispatch_semaphore_signal(sem);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">    NSLog(@&quot;任务3:%@&quot;,[NSThread currentThread]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="4-dispatch-group-enter-amp-dispatch-group-leave"><a href="#4-dispatch-group-enter-amp-dispatch-group-leave" class="headerlink" title="4. dispatch_group_enter&amp;dispatch_group_leave"></a>4. dispatch_group_enter&amp;dispatch_group_leave</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 请求和参数为我项目里面的不用在意</div><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line">// 计数＋1</div><div class="line">dispatch_group_enter(group);</div><div class="line">[JDApiService getActivityDetailWithActivityId:self.activityId Location:stockAddressId SuccessBlock:^(NSDictionary *userInfo) &#123;</div><div class="line">    // 数据返回后一些处理</div><div class="line">    ...</div><div class="line">    // 计数－1</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125; FailureBlock:^(NSError *error) &#123;</div><div class="line">    // 数据返回后一些处理</div><div class="line">    ...</div><div class="line">    // 计数－1</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">// 计数＋1</div><div class="line">dispatch_group_enter(group)</div><div class="line">[JDApiService getAllCommentWithActivityId:self.activityId PageSize:3 PageNum:self.commentCurrentPage SuccessBlock:^(NSDictionary *userInfo) &#123;</div><div class="line">    // 数据返回后一些处理</div><div class="line">    ...</div><div class="line">    // 计数－1</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125; FailureBlock:^(NSError *error) &#123;</div><div class="line">    // 数据返回后一些处理</div><div class="line">    ...</div><div class="line">    // 计数－1</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">// 其实用计数的说法可能不太对，但是就这么理解吧。会在计数为0的时候执行dispatch_group_notify的任务。</div><div class="line">dispatch_group_notify(group, mainQueue, ^&#123;</div><div class="line">    // 一般为回主队列刷新UI</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-RAC&quot;&gt;&lt;a href=&quot;#1-RAC&quot; class=&quot;headerlink&quot; title=&quot;1. RAC&quot;&gt;&lt;/a&gt;1. RAC&lt;/h2&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.weixinbing.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Git命令大全</title>
    <link href="http://www.weixinbing.com/2017/01/19/08%20Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://www.weixinbing.com/2017/01/19/08 Git命令大全/</id>
    <published>2017-01-19T14:56:20.000Z</published>
    <updated>2018-12-03T09:57:21.843Z</updated>
    
    <content type="html"><![CDATA[<p>Git Command<br><a id="more"></a></p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ul>
<li>git init  创建git仓库</li>
</ul>
<h3 id="添加提交"><a href="#添加提交" class="headerlink" title="添加提交"></a>添加提交</h3><ul>
<li>git add <file> 添加(从工作区到暂存区,可多次使用添加多个文件)</file></li>
<li>git commit -m “description” 提交(从暂存区到本地仓库)</li>
</ul>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><ul>
<li>git status 查看仓库当前状态</li>
<li>git diff <file> 查看添加前修改的内容</file></li>
<li>git diff HEAD — <file> 查看工作区和版本库最新版本的区别</file></li>
<li>git log 查看提交日志</li>
<li>git log —pretty=oneline 查看提交日志(单行显示每一条日志)</li>
</ul>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul>
<li>git reset —hard HEAD^ 回滚到上个版本</li>
<li>git reset —hard HEAD^^ 回滚到上上个版本</li>
<li>git reset —hard HEAD~n 回滚到上n个版本</li>
<li>git reset —hard <commit id=""> 回滚到指定提交id的版本</commit></li>
</ul>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><ul>
<li>rm <file> 删除工作区文件</file></li>
<li>git checkout — <file> 撤销(丢弃)工作区的修改(让工作区和HEAD保持一致)</file></li>
<li>git reset HEAD <file> 撤销暂存区的文件(个人理解为撤销git add命令)</file></li>
<li>git rm <file> 从版本库中删除文件(会同时删除工作区文件,个人理解为rm <file>命令 + git add <file>命令 )</file></file></file></li>
</ul>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ul>
<li>git remote add origin <ssh或https>关联远程仓库</ssh或https></li>
<li>git push -u origin master 第一次推送master分支的所有内容</li>
<li>git push origin master 推送master分支的所有内容(origin为远程库)</li>
<li>git pull —rebase origin master 拉取master分支的内容</li>
<li>git pull 拉取关联的远程分支内容</li>
<li>git branch —set-upstream branch-name origin/branch-name 设置本地分支和远程分支的链接关系<br><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong>分割线<strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></li>
<li>git clone <ssh或https> 克隆远程仓库</ssh或https></li>
</ul>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul>
<li>git branch dev 创建一个dev分支</li>
<li>git checkout dev 切换到dev分支</li>
<li>git checkout -b dev 创建一个dev分支并切换到dev分支</li>
<li>git checkout -b dev origin/dev 创建远程origin的dev分支到本地</li>
<li>git branch 查看分支(列出所有分支,当前分支前有*标记)</li>
<li>git merge dev 合并指定分支到当前分支</li>
<li>git merge —no-ff -m “desc” dev 合并dev分支到当前分支并禁用”fast forward”</li>
<li>git branch -d dev 删除dev分支</li>
<li>git branch -D dev 强行删除一个没有被合并过的dev分支<br><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong>分割线<strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></li>
<li>git log —graph 查看分支的合并情况</li>
<li>git log —graph —pretty=oneline  查看分支的合并情况(单行)</li>
<li>git log —graph —pretty=oneline —abbrev-commit 查看分支的合并情况(单行短id)</li>
</ul>
<h3 id="贮藏管理"><a href="#贮藏管理" class="headerlink" title="贮藏管理"></a>贮藏管理</h3><ul>
<li>git stash 贮藏当前工作区的修改(可多次stash)</li>
<li>git stash list 查看贮藏列表</li>
<li>git stash apply 恢复stash内容(不删除stash内容)</li>
<li>git stash drop 删除stash内容</li>
<li>git stash pop 恢复并删除stash内容</li>
</ul>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ul>
<li>git tag <name> 给当前分支上最新的的commitId打上标签</name></li>
<li>git tag 查看所有标签(按字母排序,不按时间)</li>
<li>git tag <name> <commitid> 给对应的commitId打上标签</commitid></name></li>
<li>git show <name> 查看标签信息</name></li>
<li>git tag -a <name> -m “desc” <commitid> 创建带有说明的标签(-a指定标签名,-m指定说明文字)</commitid></name></li>
<li>git tag -s <name> -m “desc” <commitid> 用PGP签名标签</commitid></name></li>
<li>git tag -d <name> 删除标签</name></li>
<li>git push origin :refs/tags/<name> 删除远程标签(需要先删除本地标签)</name></li>
<li>git push origin <name> 推送标签到远程</name></li>
<li>git push origin —tags 推送所有标签到远程</li>
</ul>
<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><ul>
<li>git add -f <name> 强制添加被.gitignore忽略不能添加的文件</name></li>
<li>git check-ignore -v <name> 查看文件被忽略的原因</name></li>
</ul>
<h3 id="别名定义"><a href="#别名定义" class="headerlink" title="别名定义"></a>别名定义</h3><ul>
<li>git config —global alias.st status 配置查看仓库状态的别名</li>
<li>git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Command&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://www.weixinbing.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.weixinbing.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Xcode8新特性之Thread Sanitizer</title>
    <link href="http://www.weixinbing.com/2016/12/31/07%20Xcode8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BThread%20Sanitizer/"/>
    <id>http://www.weixinbing.com/2016/12/31/07 Xcode8新特性之Thread Sanitizer/</id>
    <published>2016-12-30T16:00:00.000Z</published>
    <updated>2017-01-19T14:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>多线程问题调试工具<br><a id="more"></a></p>
<h3 id="Thread-Sanitizer的使用"><a href="#Thread-Sanitizer的使用" class="headerlink" title="Thread Sanitizer的使用"></a>Thread Sanitizer的使用</h3><p>打开Xcode 8新增的多线程问题调试工具Thread Sanitizer<br><img src="http://oihqdel9t.bkt.clouddn.com/2012/12/Xcode%20Thread%20Sanitizer.png" alt="Xcode Thread Sanitizer"></p>
<p>运行下图中代码，检测data race<br><img src="http://oihqdel9t.bkt.clouddn.com/2012/12/count%20data%20race.png" alt="count data race"><br>很直观，Xcode直接提示你发生了data race的变量及其代码位置，同时还清晰的展示了函数当前的各线程调用栈，十分清晰，接下来你要做的就是增加同步操作，比如加锁，从而消除data race，再运行测试是否生效。</p>
<blockquote>
<p>最后计算的结果有很大概率小于20000，原因是count ++为非原子操作。这也是data race的场景，这种race没有crash也没有memory corruption，因此有些人把这种race称作benign race(良性的race)。不过上面提到的WWDC视频中，苹果的工程师说到：<br><code>There is No Such Thing as a “Benign” Race</code><br>意思是，只要发生data race，就没有良性一说了，因为虽然程序没有crash，但count最后的值还是出错了，这种 错误必然会导致逻辑上的错误，如果这个count值代表的是你银行卡余额，你应该会更加同意苹果工程师的观点。</p>
</blockquote>
<p>data race定义：</p>
<ul>
<li>当至少有两个线程同时访问同一个变量，而且至少其中有一个是写操作时，就发生了data race</li>
</ul>
<h3 id="Thread-Sanitizer的工作原理"><a href="#Thread-Sanitizer的工作原理" class="headerlink" title="Thread Sanitizer的工作原理"></a>Thread Sanitizer的工作原理</h3><blockquote>
<p>在WWDC的视频中也介绍过了，大家可以仔细看下视频，大致原理是记录每个线程访问变量的信息来做分析，值得一提的是，现阶段的Thread Sanitizer最多只同时记录4个线程的访问信息，在复杂的场景下，可能出现偶尔检测不出data race的场景，所以需要长时间经常性的运行来尽可能多的发现data race，这也是为什么苹果建议默认开启Thread Sanitizer，而且Thread Sanitizer造成的额外性能损耗非常之小。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多线程问题调试工具&lt;br&gt;
    
    </summary>
    
      <category term="Xcode" scheme="http://www.weixinbing.com/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="http://www.weixinbing.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的关键字const／static／extern</title>
    <link href="http://www.weixinbing.com/2016/12/26/06.0%20iOS%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97const%EF%BC%8Fstatic%EF%BC%8Fextern/"/>
    <id>http://www.weixinbing.com/2016/12/26/06.0 iOS中的关键字const／static／extern/</id>
    <published>2016-12-26T14:36:36.000Z</published>
    <updated>2018-12-03T14:11:32.534Z</updated>
    
    <content type="html"><![CDATA[<h4 id="const"><a href="#const" class="headerlink" title="const:"></a>const:</h4><p>const只修饰其右边的变量，被修饰的变量是只读的；<br>const常量不能被修改，不能用来定义数组的长度，也不能放在case关键字后面。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p</div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> *p	</div><div class="line"><span class="comment">// *p只读, p变量(这2种没有区别)</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p	</div><div class="line"><span class="comment">// *p变量, p只读</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p	  </div><div class="line"><span class="comment">// *p只读, p只读</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> p   </div><div class="line"><span class="comment">// *p只读, p只读</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<blockquote>
<p>const常量误区：<br>   <code>const int n = 5; int a[n];</code><br>   上述代码中变量n被修饰为只读变量，可惜再怎么修饰也不是“常量”，而数组定义时长度必须是“常量”，因此报错。</p>
<p>const int MAX_LENGTH = 100; //这不是“常量”，而是一个只读变量。</p>
</blockquote>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><h5 id="1-修饰局部变量"><a href="#1-修饰局部变量" class="headerlink" title="1. 修饰局部变量"></a>1. 修饰局部变量</h5><p>保证局部变量永远只初始化一次，在程序的运行过程中永远只有一份内存， 生命周期类似全局变量了，但是作用域不变。</p>
<h5 id="2-修饰全局变量"><a href="#2-修饰全局变量" class="headerlink" title="2. 修饰全局变量"></a>2. 修饰全局变量</h5><p>使全局变量的作用域仅限于当前文件内部，不能通过extern来引用</p>
<h5 id="3-修饰函数"><a href="#3-修饰函数" class="headerlink" title="3. 修饰函数"></a>3. 修饰函数</h5><p>被修饰的函数被称为静态函数，使得外部文件无法访问这个函数，OC语言中很少使用。</p>
<h4 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h4><p>它的作用是声明外部全局变量</p>
<p>苹果推荐extern声明全局变量（不建议使用define），优势是保持常量绝对不会被修改，并且还带有初始化的类型信息。<br>通常在.h中声明，在.m中实现<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .h声明</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> NAME;</div><div class="line"></div><div class="line"><span class="comment">// .m实现</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> NAME = <span class="string">@"XXX"</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>const是用来定义一个常量。而static在C语言中（OC中延用）表明此变量只在该变量的输出文件中可用(.m文件)，如果你不加“static”符号，那么编译器就会对该变量创建一个“外部符号”，后果是什么呢？</p>
<p>你可以尝试在不同文件中加入以下代码：<br><code>NSString  * const kUserName = @&quot;StrongX&quot;;</code><br>可能尽管文件之间并没有相互引用，不存在属性名重复的问题（因为这并不是一个属性，这是一个外部符号）,但是编译器还是报错了:<br><code>duplicate symbol XXX in: ....
clang: error: linker command failed with exit code 1 (use -v to see invocation)</code></p>
<p>它会告诉你在两个目标文件(.o文件是.m文件编译后的输出文件)有一个重复的符号。(OC中没有类似C++中的名字空间的概念)<br>所以当你在你自己的.m文件中需要声明一个只有你自己可见的局部变量(k开头)的变量的时候<br><code>一定要同时使用“static”和“const”两个关键字。</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const:&quot;&gt;&lt;/a&gt;const:&lt;/h4&gt;&lt;p&gt;const只修饰其右边的变量，被修饰的变量是只读的；&lt;br&gt;const常量不能被修改，不能用来定义数组的长度，也不能放在case关键字后面。&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; *p	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// *p只读, p变量(这2种没有区别)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; p	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// *p变量, p只读&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; p	  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// *p只读, p只读&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; p   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// *p只读, p只读&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.weixinbing.com/categories/iOS/"/>
    
    
      <category term="关键字" scheme="http://www.weixinbing.com/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
</feed>
